{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "TAK Base Layer - VPC, ECS, ECR, KMS, S3",
  "Metadata": {},
  "Parameters": {
    "VPCLocationId": {
      "Description": "Unique VPC ID per AWS regions (0-255)",
      "Type": "Number",
      "Default": 0,
      "MinValue": 0,
      "MaxValue": 255
    },
    "EnvType": {
      "Description": "Environment type",
      "Type": "String",
      "AllowedValues": [
        "prod",
        "dev-test"
      ],
      "Default": "prod"
    }
  },
  "Rules": {},
  "Mappings": {},
  "Conditions": {
    "CreateProdResources": {
      "Fn::Equals": [
        {
          "Ref": "EnvType"
        },
        "prod"
      ]
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "CidrBlock": {
          "Fn::Join": [
            "",
            [
              "10.",
              {
                "Ref": "VPCLocationId"
              },
              ".0.0/16"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "VPCCIDR": {
      "Type": "AWS::EC2::VPCCidrBlock",
      "Properties": {
        "AmazonProvidedIpv6CidrBlock": true,
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "SubnetPublicA": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPCCIDR",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            "0",
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "VPC",
                    "CidrBlock"
                  ]
                },
                256,
                8
              ]
            }
          ]
        },
        "Ipv6CidrBlock": {
          "Fn::Select": [
            "0",
            {
              "Fn::Cidr": [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Fn::GetAtt": [
                        "VPC",
                        "Ipv6CidrBlocks"
                      ]
                    }
                  ]
                },
                256,
                64
              ]
            }
          ]
        },
        "AssignIpv6AddressOnCreation": true,
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-public-a"
                ]
              ]
            }
          }
        ]
      }
    },
    "SubnetPublicB": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "VPCCIDR",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            "1",
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "VPC",
                    "CidrBlock"
                  ]
                },
                256,
                8
              ]
            }
          ]
        },
        "Ipv6CidrBlock": {
          "Fn::Select": [
            "1",
            {
              "Fn::Cidr": [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Fn::GetAtt": [
                        "VPC",
                        "Ipv6CidrBlocks"
                      ]
                    }
                  ]
                },
                256,
                64
              ]
            }
          ]
        },
        "AssignIpv6AddressOnCreation": true,
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-public-b"
                ]
              ]
            }
          }
        ]
      }
    },
    "SubnetPrivateA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            "2",
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "VPC",
                    "CidrBlock"
                  ]
                },
                256,
                8
              ]
            }
          ]
        },
        "Ipv6CidrBlock": {
          "Fn::Select": [
            "2",
            {
              "Fn::Cidr": [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Fn::GetAtt": [
                        "VPC",
                        "Ipv6CidrBlocks"
                      ]
                    }
                  ]
                },
                256,
                64
              ]
            }
          ]
        },
        "AssignIpv6AddressOnCreation": true,
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-private-a"
                ]
              ]
            }
          }
        ]
      }
    },
    "SubnetPrivateB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Select": [
            "3",
            {
              "Fn::Cidr": [
                {
                  "Fn::GetAtt": [
                    "VPC",
                    "CidrBlock"
                  ]
                },
                256,
                8
              ]
            }
          ]
        },
        "Ipv6CidrBlock": {
          "Fn::Select": [
            "3",
            {
              "Fn::Cidr": [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Fn::GetAtt": [
                        "VPC",
                        "Ipv6CidrBlocks"
                      ]
                    }
                  ]
                },
                256,
                64
              ]
            }
          ]
        },
        "AssignIpv6AddressOnCreation": true,
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-private-b"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "EgressOnlyInternetGateway": {
      "Type": "AWS::EC2::EgressOnlyInternetGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "VPCIG": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-public"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCIG",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteV6": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCIG",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationIpv6CidrBlock": "::/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetPublicAAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPublicA"
        }
      }
    },
    "SubnetPublicBAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetPublicB"
        }
      }
    },
    "NatGatewayA": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatPublicIPA",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "SubnetPublicA"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-a"
                ]
              ]
            }
          }
        ]
      }
    },
    "NatGatewayB": {
      "Type": "AWS::EC2::NatGateway",
      "Condition": "CreateProdResources",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatPublicIPB",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "SubnetPublicB"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-subnet-b"
                ]
              ]
            }
          }
        ]
      }
    },
    "NatPublicIPA": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "VPC",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "NatPublicIPB": {
      "Type": "AWS::EC2::EIP",
      "Condition": "CreateProdResources",
      "DependsOn": "VPC",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "PrivateRouteTableA": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-private-subnet-a"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteTableB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-private-subnet-b"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteA": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCIG",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableA"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGatewayA"
        }
      }
    },
    "PrivateRouteB": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCIG",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableB"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Fn::If": [
            "CreateProdResources",
            {
              "Ref": "NatGatewayB"
            },
            {
              "Ref": "NatGatewayA"
            }
          ]
        }
      }
    },
    "PrivateRouteV6A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableA"
        },
        "DestinationIpv6CidrBlock": "::/0",
        "GatewayId": {
          "Ref": "EgressOnlyInternetGateway"
        }
      }
    },
    "PrivateRouteV6B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableB"
        },
        "DestinationIpv6CidrBlock": "::/0",
        "GatewayId": {
          "Ref": "EgressOnlyInternetGateway"
        }
      }
    },
    "SubnetPrivateAAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableA"
        },
        "SubnetId": {
          "Ref": "SubnetPrivateA"
        }
      }
    },
    "SubnetPrivateBAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTableB"
        },
        "SubnetId": {
          "Ref": "SubnetPrivateB"
        }
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": {
          "Ref": "AWS::StackName"
        },
        "CapacityProviders": [
          "FARGATE"
        ],
        "DefaultCapacityProviderStrategy": [
          {
            "Base": 0,
            "CapacityProvider": "FARGATE",
            "Weight": 0
          }
        ]
      }
    },
    "Repository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        },
        "RepositoryPolicyText": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer"
              ]
            }
          ]
        },
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Expire untagged images older than 8 days\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\": \"days\",\"countNumber\":8},\"action\":{\"type\": \"expire\"}}]}"
        }
      }
    },
    "KMSAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "TargetKeyId": {
          "Ref": "KMS"
        }
      }
    },
    "KMS": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": {
          "Ref": "AWS::StackName"
        },
        "Enabled": true,
        "EnableKeyRotation": false,
        "KeyPolicy": {
          "Id": {
            "Ref": "AWS::StackName"
          },
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              },
              "Action": [
                "kms:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "ConfigBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-",
              {
                "Ref": "AWS::Region"
              },
              "-env-config"
            ]
          ]
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced"
            }
          ]
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID": {
                  "Ref": "KMSAlias"
                },
                "SSEAlgorithm": "aws:kms"
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      },
      "DeletionPolicy": "Delete"
    },
    "S3Endpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "VpcEndpointType": "Gateway",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-s3-gateway"
                ]
              ]
            }
          }
        ],
        "RouteTableIds": [
          {
            "Ref": "PrivateRouteTableA"
          },
          {
            "Ref": "PrivateRouteTableB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ECRDKREndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateProdResources",
      "Properties": {
        "VpcEndpointType": "Interface",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-ecr-dkr-interface"
                ]
              ]
            }
          }
        ],
        "SubnetIds": [
          {
            "Ref": "SubnetPrivateA"
          },
          {
            "Ref": "SubnetPrivateB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".ecr.dkr"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ]
      }
    },
    "ECRAPIEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateProdResources",
      "Properties": {
        "VpcEndpointType": "Interface",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-ecr-api-interface"
                ]
              ]
            }
          }
        ],
        "SubnetIds": [
          {
            "Ref": "SubnetPrivateA"
          },
          {
            "Ref": "SubnetPrivateB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".ecr.api"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ]
      }
    },
    "KMSEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateProdResources",
      "Properties": {
        "VpcEndpointType": "Interface",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-kms-interface"
                ]
              ]
            }
          }
        ],
        "SubnetIds": [
          {
            "Ref": "SubnetPrivateA"
          },
          {
            "Ref": "SubnetPrivateB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".kms"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ]
      }
    },
    "SecretsManagerEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateProdResources",
      "Properties": {
        "VpcEndpointType": "Interface",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-secretsmanager-interface"
                ]
              ]
            }
          }
        ],
        "SubnetIds": [
          {
            "Ref": "SubnetPrivateA"
          },
          {
            "Ref": "SubnetPrivateB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".secretsmanager"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ]
      }
    },
    "CloudwatchEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Condition": "CreateProdResources",
      "Properties": {
        "VpcEndpointType": "Interface",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-cloudwatch-interface"
                ]
              ]
            }
          }
        ],
        "SubnetIds": [
          {
            "Ref": "SubnetPrivateA"
          },
          {
            "Ref": "SubnetPrivateB"
          }
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".logs"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSecurityGroup"
          }
        ]
      }
    },
    "EndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "CreateProdResources",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "endpoint-sg"
                ]
              ]
            }
          }
        ],
        "GroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "endpoint-sg"
            ]
          ]
        },
        "GroupDescription": "Access to Endpoint services",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {
              "Fn::GetAtt": [
                "VPC",
                "CidrBlock"
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "VPC ID",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-vpc-id"
            ]
          ]
        }
      },
      "Value": {
        "Ref": "VPC"
      }
    },
    "VpcCidrIpv4": {
      "Description": "VPC IPv4 CIDR Block",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-vpc-cidr-ipv4"
            ]
          ]
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
        ]
      }
    },
    "VpcCidrIpv6": {
      "Description": "VPC IPv6 CIDR Block",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-vpc-cidr-ipv6"
            ]
          ]
        }
      },
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::GetAtt": [
              "VPC",
              "Ipv6CidrBlocks"
            ]
          }
        ]
      }
    },
    "SubnetPublicA": {
      "Description": "Subnet Public A",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-subnet-public-a"
            ]
          ]
        }
      },
      "Value": {
        "Ref": "SubnetPublicA"
      }
    },
    "SubnetPublicB": {
      "Description": "Subnet Public B",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-subnet-public-b"
            ]
          ]
        }
      },
      "Value": {
        "Ref": "SubnetPublicB"
      }
    },
    "SubnetPrivateA": {
      "Description": "Subnet Private A",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-subnet-private-a"
            ]
          ]
        }
      },
      "Value": {
        "Ref": "SubnetPrivateA"
      }
    },
    "SubnetPrivateB": {
      "Description": "Subnet Private B",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-subnet-private-b"
            ]
          ]
        }
      },
      "Value": {
        "Ref": "SubnetPrivateB"
      }
    },
    "EcsArn": {
      "Description": "ECS ARN",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-ecs"
            ]
          ]
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "ECSCluster",
          "Arn"
        ]
      }
    },
    "EcrArn": {
      "Description": "ECR ARN",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-ecr"
            ]
          ]
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "Repository",
          "Arn"
        ]
      }
    },
    "KmsArn": {
      "Description": "KMS ARN",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-kms"
            ]
          ]
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "KMS",
          "Arn"
        ]
      }
    },
    "ConfigBucketArn": {
      "Description": "S3 Config Bucket ARN",
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-s3"
            ]
          ]
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "ConfigBucket",
          "Arn"
        ]
      }
    }
  }
}
