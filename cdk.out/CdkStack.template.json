{
 "Parameters": {
  "VPCLocationId": {
   "Type": "Number",
   "Default": 0,
   "Description": "Unique VPC ID per AWS region (0-4095, used for /20 CIDR blocks)",
   "MaxValue": 4095,
   "MinValue": 0
  },
  "EnvType": {
   "Type": "String",
   "Default": "dev-test",
   "AllowedValues": [
    "prod",
    "dev-test"
   ],
   "Description": "Environment type"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Conditions": {
  "CreateProdResources": {
   "Fn::Equals": [
    {
     "Ref": "EnvType"
    },
    "prod"
   ]
  },
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Resources": {
  "VPC": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.-1.1800966185679708e+288.0.0/20",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/VPC"
   }
  },
  "VPCCIDR": {
   "Type": "AWS::EC2::VPCCidrBlock",
   "Properties": {
    "AmazonProvidedIpv6CidrBlock": true,
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/VPCCIDR"
   }
  },
  "SubnetPublicA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AssignIpv6AddressOnCreation": true,
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": {
        "Ref": "AWS::Region"
       }
      }
     ]
    },
    "CidrBlock": {
     "Fn::Select": [
      0,
      {
       "Fn::Cidr": [
        {
         "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
         ]
        },
        256,
        8
       ]
      }
     ]
    },
    "Ipv6CidrBlock": {
     "Fn::Select": [
      0,
      {
       "Fn::Cidr": [
        {
         "Fn::Select": [
          0,
          {
           "Fn::GetAtt": [
            "VPC",
            "Ipv6CidrBlocks"
           ]
          }
         ]
        },
        256,
        64
       ]
      }
     ]
    },
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-subnet-public-a"
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "DependsOn": [
    "VPCCIDR"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPublicA"
   }
  },
  "SubnetPublicB": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AssignIpv6AddressOnCreation": true,
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": {
        "Ref": "AWS::Region"
       }
      }
     ]
    },
    "CidrBlock": {
     "Fn::Select": [
      1,
      {
       "Fn::Cidr": [
        {
         "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
         ]
        },
        256,
        8
       ]
      }
     ]
    },
    "Ipv6CidrBlock": {
     "Fn::Select": [
      1,
      {
       "Fn::Cidr": [
        {
         "Fn::Select": [
          0,
          {
           "Fn::GetAtt": [
            "VPC",
            "Ipv6CidrBlocks"
           ]
          }
         ]
        },
        256,
        64
       ]
      }
     ]
    },
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-subnet-public-b"
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "DependsOn": [
    "VPCCIDR"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPublicB"
   }
  },
  "SubnetPrivateA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AssignIpv6AddressOnCreation": true,
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": {
        "Ref": "AWS::Region"
       }
      }
     ]
    },
    "CidrBlock": {
     "Fn::Select": [
      2,
      {
       "Fn::Cidr": [
        {
         "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
         ]
        },
        256,
        8
       ]
      }
     ]
    },
    "Ipv6CidrBlock": {
     "Fn::Select": [
      2,
      {
       "Fn::Cidr": [
        {
         "Fn::Select": [
          0,
          {
           "Fn::GetAtt": [
            "VPC",
            "Ipv6CidrBlocks"
           ]
          }
         ]
        },
        256,
        64
       ]
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-subnet-private-a"
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPrivateA"
   }
  },
  "SubnetPrivateB": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AssignIpv6AddressOnCreation": true,
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": {
        "Ref": "AWS::Region"
       }
      }
     ]
    },
    "CidrBlock": {
     "Fn::Select": [
      3,
      {
       "Fn::Cidr": [
        {
         "Fn::GetAtt": [
          "VPC",
          "CidrBlock"
         ]
        },
        256,
        8
       ]
      }
     ]
    },
    "Ipv6CidrBlock": {
     "Fn::Select": [
      3,
      {
       "Fn::Cidr": [
        {
         "Fn::Select": [
          0,
          {
           "Fn::GetAtt": [
            "VPC",
            "Ipv6CidrBlocks"
           ]
          }
         ]
        },
        256,
        64
       ]
      }
     ]
    },
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-subnet-private-b"
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPrivateB"
   }
  },
  "InternetGateway": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Network",
      "Value": "Public"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/InternetGateway"
   }
  },
  "EgressOnlyInternetGateway": {
   "Type": "AWS::EC2::EgressOnlyInternetGateway",
   "Properties": {
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/EgressOnlyInternetGateway"
   }
  },
  "NatPublicIPA": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/NatPublicIPA"
   }
  },
  "NatGatewayA": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "NatPublicIPA",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "SubnetPublicA"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-subnet-a"
        ]
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/NatGatewayA"
   }
  },
  "PublicRouteTable": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-public"
        ]
       ]
      }
     },
     {
      "Key": "Network",
      "Value": "Public"
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PublicRouteTable"
   }
  },
  "PrivateRouteTableA": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-private-subnet-a"
        ]
       ]
      }
     },
     {
      "Key": "Network",
      "Value": "Private"
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteTableA"
   }
  },
  "PrivateRouteTableB": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-private-subnet-b"
        ]
       ]
      }
     },
     {
      "Key": "Network",
      "Value": "Private"
     }
    ],
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteTableB"
   }
  },
  "SubnetPublicAAssoc": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    },
    "SubnetId": {
     "Ref": "SubnetPublicA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPublicAAssoc"
   }
  },
  "SubnetPublicBAssoc": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    },
    "SubnetId": {
     "Ref": "SubnetPublicB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPublicBAssoc"
   }
  },
  "SubnetPrivateAAssoc": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateRouteTableA"
    },
    "SubnetId": {
     "Ref": "SubnetPrivateA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPrivateAAssoc"
   }
  },
  "SubnetPrivateBAssoc": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "PrivateRouteTableB"
    },
    "SubnetId": {
     "Ref": "SubnetPrivateB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SubnetPrivateBAssoc"
   }
  },
  "VPCIG": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "InternetGateway"
    },
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/VPCIG"
   }
  },
  "PublicRoute": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    },
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    }
   },
   "DependsOn": [
    "VPCIG"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/PublicRoute"
   }
  },
  "PublicRouteV6": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationIpv6CidrBlock": "::/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    },
    "RouteTableId": {
     "Ref": "PublicRouteTable"
    }
   },
   "DependsOn": [
    "VPCIG"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/PublicRouteV6"
   }
  },
  "PrivateRouteA": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "NatGatewayA"
    },
    "RouteTableId": {
     "Ref": "PrivateRouteTableA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteA"
   }
  },
  "PrivateRouteB": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "NatGatewayA"
    },
    "RouteTableId": {
     "Ref": "PrivateRouteTableB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteB"
   }
  },
  "PrivateRouteV6A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationIpv6CidrBlock": "::/0",
    "GatewayId": {
     "Ref": "EgressOnlyInternetGateway"
    },
    "RouteTableId": {
     "Ref": "PrivateRouteTableA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteV6A"
   }
  },
  "PrivateRouteV6B": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationIpv6CidrBlock": "::/0",
    "GatewayId": {
     "Ref": "EgressOnlyInternetGateway"
    },
    "RouteTableId": {
     "Ref": "PrivateRouteTableB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/PrivateRouteV6B"
   }
  },
  "ECSCluster": {
   "Type": "AWS::ECS::Cluster",
   "Properties": {
    "CapacityProviders": [
     "FARGATE"
    ],
    "ClusterName": {
     "Ref": "AWS::StackName"
    },
    "DefaultCapacityProviderStrategy": [
     {
      "Base": 0,
      "CapacityProvider": "FARGATE",
      "Weight": 0
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/ECSCluster"
   }
  },
  "Repository": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Expire untagged images older than 8 days\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\": \"days\",\"countNumber\":8},\"action\":{\"type\": \"expire\"}}]}"
    },
    "RepositoryName": {
     "Ref": "AWS::StackName"
    },
    "RepositoryPolicyText": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": "*",
       "Action": [
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ]
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/Repository"
   }
  },
  "KMS": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "Description": {
     "Ref": "AWS::StackName"
    },
    "EnableKeyRotation": false,
    "Enabled": true,
    "KeyPolicy": {
     "Id": {
      "Ref": "AWS::StackName"
     },
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
        }
       },
       "Action": "kms:*",
       "Resource": "*"
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/KMS"
   }
  },
  "KMSAlias": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": {
     "Fn::Join": [
      "",
      [
       "alias/",
       {
        "Ref": "AWS::StackName"
       }
      ]
     ]
    },
    "TargetKeyId": {
     "Ref": "KMS"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/KMSAlias"
   }
  },
  "ConfigBucket": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Ref": "KMSAlias"
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-",
       {
        "Ref": "AWS::Region"
       },
       "-env-config"
      ]
     ]
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "BucketOwnerEnforced"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/ConfigBucket"
   }
  },
  "S3Endpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "RouteTableIds": [
     {
      "Ref": "PrivateRouteTableA"
     },
     {
      "Ref": "PrivateRouteTableB"
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".s3"
      ]
     ]
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-s3-gateway"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Gateway",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/S3Endpoint"
   }
  },
  "ECRDKREndpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".ecr.dkr"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "SubnetPrivateA"
     },
     {
      "Ref": "SubnetPrivateB"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-ecr-dkr-interface"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/ECRDKREndpoint"
   },
   "Condition": "CreateProdResources"
  },
  "ECRAPIEndpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".ecr.api"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "SubnetPrivateA"
     },
     {
      "Ref": "SubnetPrivateB"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-ecr-api-interface"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/ECRAPIEndpoint"
   },
   "Condition": "CreateProdResources"
  },
  "KMSEndpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".kms"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "SubnetPrivateA"
     },
     {
      "Ref": "SubnetPrivateB"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-kms-interface"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/KMSEndpoint"
   },
   "Condition": "CreateProdResources"
  },
  "SecretsManagerEndpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".secretsmanager"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "SubnetPrivateA"
     },
     {
      "Ref": "SubnetPrivateB"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-secretsmanager-interface"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/SecretsManagerEndpoint"
   },
   "Condition": "CreateProdResources"
  },
  "CloudwatchEndpoint": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".logs"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "SubnetPrivateA"
     },
     {
      "Ref": "SubnetPrivateB"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         "-cloudwatch-interface"
        ]
       ]
      }
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "VPC"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/CloudwatchEndpoint"
   },
   "Condition": "CreateProdResources"
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21P0UrDQBD8lr5fzzYi6GMaihTBhlR8lc1lq9cke+F2zxBC/l0uKdYHn2Z3dnaYSfT26VFvVtDz2lT1urGlHk8CplbZmXLw0KKgj0vmqLJiHSno+WNEk+gxO9N7nqkFMlv5XeOW11MoCSVOBxL0hPIMgj0Mkdp/emQ+UjP8dzzkEV7hL1m4IPgGZYM38xuXMjtjYQ63ZLm+piJgvlok+TW5CvZUdc6STAoN61ivCRybovFxLbBzbMX5QdUtz01fcI6SNhZ4UnwfZbtgapQp8scgXZBJkatQX/juO0n09kFvVhe2du0DiW1RFwv+AGtGpdN4AQAA"
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "VpcIdOutput": {
   "Description": "VPC ID",
   "Value": {
    "Ref": "VPC"
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-vpc-id"
      ]
     ]
    }
   }
  },
  "VpcCidrIpv4Output": {
   "Description": "VPC IPv4 CIDR Block",
   "Value": {
    "Fn::GetAtt": [
     "VPC",
     "CidrBlock"
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-vpc-cidr-ipv4"
      ]
     ]
    }
   }
  },
  "VpcCidrIpv6Output": {
   "Description": "VPC IPv6 CIDR Block",
   "Value": {
    "Fn::Select": [
     0,
     {
      "Fn::GetAtt": [
       "VPC",
       "Ipv6CidrBlocks"
      ]
     }
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-vpc-cidr-ipv6"
      ]
     ]
    }
   }
  },
  "SubnetPublicAOutput": {
   "Description": "Subnet Public A",
   "Value": {
    "Ref": "SubnetPublicA"
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-subnet-public-a"
      ]
     ]
    }
   }
  },
  "SubnetPublicBOutput": {
   "Description": "Subnet Public B",
   "Value": {
    "Ref": "SubnetPublicB"
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-subnet-public-b"
      ]
     ]
    }
   }
  },
  "SubnetPrivateAOutput": {
   "Description": "Subnet Private A",
   "Value": {
    "Ref": "SubnetPrivateA"
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-subnet-private-a"
      ]
     ]
    }
   }
  },
  "SubnetPrivateBOutput": {
   "Description": "Subnet Private B",
   "Value": {
    "Ref": "SubnetPrivateB"
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-subnet-private-b"
      ]
     ]
    }
   }
  },
  "EcsArnOutput": {
   "Description": "ECS ARN",
   "Value": {
    "Fn::GetAtt": [
     "ECSCluster",
     "Arn"
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-ecs"
      ]
     ]
    }
   }
  },
  "EcrArnOutput": {
   "Description": "ECR ARN",
   "Value": {
    "Fn::GetAtt": [
     "Repository",
     "Arn"
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-ecr"
      ]
     ]
    }
   }
  },
  "KmsArnOutput": {
   "Description": "KMS ARN",
   "Value": {
    "Fn::GetAtt": [
     "KMS",
     "Arn"
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-kms"
      ]
     ]
    }
   }
  },
  "ConfigBucketArnOutput": {
   "Description": "S3 Config Bucket ARN",
   "Value": {
    "Fn::GetAtt": [
     "ConfigBucket",
     "Arn"
    ]
   },
   "Export": {
    "Name": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-s3"
      ]
     ]
    }
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}