"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVpcResources = createVpcResources;
exports.createVpcL2Resources = createVpcL2Resources;
const cdk = __importStar(require("aws-cdk-lib"));
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const aws_cdk_lib_1 = require("aws-cdk-lib");
function createVpcResources(scope, envType, createNatGateways) {
    const stack = cdk.Stack.of(scope);
    const stackName = aws_cdk_lib_1.Fn.ref('AWS::StackName');
    // Direct VPC CIDR block values for simplicity
    const vpcCidr = '10.0.0.0/16';
    const vpc = new ec2.CfnVPC(scope, 'VPC', {
        cidrBlock: vpcCidr,
        enableDnsHostnames: true,
        enableDnsSupport: true,
        tags: [{ key: 'Name', value: stackName }],
    });
    const vpcCidrV6 = new ec2.CfnVPCCidrBlock(scope, 'VPCCIDR', {
        vpcId: vpc.ref,
        amazonProvidedIpv6CidrBlock: true,
    });
    // Use 256 subnets for full parity with cfn.json
    // Subnets using raw CloudFormation intrinsics for CIDR
    const subnetPublicA = new ec2.CfnSubnet(scope, 'SubnetPublicA', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [0, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [0, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: true,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-public-a']) }],
    });
    subnetPublicA.addDependency(vpcCidrV6);
    const subnetPublicB = new ec2.CfnSubnet(scope, 'SubnetPublicB', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [1, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [1, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: true,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-public-b']) }],
    });
    subnetPublicB.addDependency(vpcCidrV6);
    const subnetPrivateA = new ec2.CfnSubnet(scope, 'SubnetPrivateA', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [2, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [2, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: false,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-private-a']) }],
    });
    const subnetPrivateB = new ec2.CfnSubnet(scope, 'SubnetPrivateB', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [3, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [3, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: false,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-private-b']) }],
    });
    const igw = new ec2.CfnInternetGateway(scope, 'InternetGateway', {
        tags: [
            { key: 'Name', value: stackName },
            { key: 'Network', value: 'Public' },
        ],
    });
    const egressOnlyIgw = new ec2.CfnEgressOnlyInternetGateway(scope, 'EgressOnlyInternetGateway', {
        vpcId: vpc.ref,
    });
    const natEipA = new ec2.CfnEIP(scope, 'NatPublicIPA', {
        domain: 'vpc',
        tags: [{ key: 'Name', value: stackName }],
    });
    let natEipB;
    if (createNatGateways) {
        natEipB = new ec2.CfnEIP(scope, 'NatPublicIPB', {
            domain: 'vpc',
            tags: [{ key: 'Name', value: stackName }],
        });
    }
    const natGatewayA = new ec2.CfnNatGateway(scope, 'NatGatewayA', {
        subnetId: subnetPublicA.ref,
        allocationId: natEipA.attrAllocationId,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-a']) }],
    });
    let natGatewayB;
    if (createNatGateways && natEipB) {
        natGatewayB = new ec2.CfnNatGateway(scope, 'NatGatewayB', {
            subnetId: subnetPublicB.ref,
            allocationId: natEipB.attrAllocationId,
            tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-b']) }],
        });
    }
    const publicRouteTable = new ec2.CfnRouteTable(scope, 'PublicRouteTable', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Public' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-public']) },
        ],
    });
    const privateRouteTableA = new ec2.CfnRouteTable(scope, 'PrivateRouteTableA', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Private' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-private-subnet-a']) },
        ],
    });
    const privateRouteTableB = new ec2.CfnRouteTable(scope, 'PrivateRouteTableB', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Private' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-private-subnet-b']) },
        ],
    });
    // Add explicit route table associations and routes for parity with cfn.json
    // Public subnet associations
    const subnetPublicAAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPublicAAssoc', {
        subnetId: subnetPublicA.ref,
        routeTableId: publicRouteTable.ref,
    });
    const subnetPublicBAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPublicBAssoc', {
        subnetId: subnetPublicB.ref,
        routeTableId: publicRouteTable.ref,
    });
    // Private subnet associations
    const subnetPrivateAAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPrivateAAssoc', {
        subnetId: subnetPrivateA.ref,
        routeTableId: privateRouteTableA.ref,
    });
    const subnetPrivateBAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPrivateBAssoc', {
        subnetId: subnetPrivateB.ref,
        routeTableId: privateRouteTableB.ref,
    });
    // Public routes (IPv4 and IPv6)
    const vpcIgwAttachment = new ec2.CfnVPCGatewayAttachment(scope, 'VPCIG', {
        vpcId: vpc.ref,
        internetGatewayId: igw.ref,
    });
    const publicRoute = new ec2.CfnRoute(scope, 'PublicRoute', {
        routeTableId: publicRouteTable.ref,
        destinationCidrBlock: '0.0.0.0/0',
        gatewayId: igw.ref,
    });
    publicRoute.addDependency(vpcIgwAttachment);
    const publicRouteV6 = new ec2.CfnRoute(scope, 'PublicRouteV6', {
        routeTableId: publicRouteTable.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: igw.ref,
    });
    publicRouteV6.addDependency(vpcIgwAttachment);
    // Private routes (IPv4 and IPv6)
    const privateRouteA = new ec2.CfnRoute(scope, 'PrivateRouteA', {
        routeTableId: privateRouteTableA.ref,
        destinationCidrBlock: '0.0.0.0/0',
        natGatewayId: natGatewayA.ref,
    });
    let privateRouteB;
    if (createNatGateways && natGatewayB) {
        privateRouteB = new ec2.CfnRoute(scope, 'PrivateRouteB', {
            routeTableId: privateRouteTableB.ref,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId: natGatewayB.ref,
        });
    }
    else {
        privateRouteB = new ec2.CfnRoute(scope, 'PrivateRouteB', {
            routeTableId: privateRouteTableB.ref,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId: natGatewayA.ref,
        });
    }
    const privateRouteV6A = new ec2.CfnRoute(scope, 'PrivateRouteV6A', {
        routeTableId: privateRouteTableA.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: egressOnlyIgw.ref,
    });
    const privateRouteV6B = new ec2.CfnRoute(scope, 'PrivateRouteV6B', {
        routeTableId: privateRouteTableB.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: egressOnlyIgw.ref,
    });
    return {
        vpc,
        vpcCidrV6,
        subnetPublicA,
        subnetPublicB,
        subnetPrivateA,
        subnetPrivateB,
        igw,
        egressOnlyIgw,
        natEipA,
        natEipB,
        natGatewayA,
        natGatewayB,
        publicRouteTable,
        privateRouteTableA,
        privateRouteTableB,
    };
}
function createVpcL2Resources(scope, vpcMajorId, vpcMinorId, createNatGateways) {
    return new ec2.Vpc(scope, 'Vpc', {
        ipAddresses: ec2.IpAddresses.cidr(`10.${vpcMajorId}.0.0/16`),
        maxAzs: 2,
        natGateways: createNatGateways ? 2 : 1, // 1 NAT Gateway always, 2 for redundancy
        subnetConfiguration: [
            {
                cidrMask: 24,
                name: 'public',
                subnetType: ec2.SubnetType.PUBLIC,
            },
            {
                cidrMask: 24,
                name: 'private',
                subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
            },
        ],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsZ0RBNE5DO0FBRUQsb0RBa0JDO0FBdlFELGlEQUFtQztBQUNuQyx5REFBMkM7QUFFM0MsNkNBQWlDO0FBb0JqQyxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLE9BQWUsRUFBRSxpQkFBMEI7SUFDOUYsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsTUFBTSxTQUFTLEdBQUcsZ0JBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUUzQyw4Q0FBOEM7SUFDOUMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDO0lBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQ3ZDLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLGtCQUFrQixFQUFFLElBQUk7UUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0tBQzFDLENBQUMsQ0FBQztJQUVILE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQzFELEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRztRQUNkLDJCQUEyQixFQUFFLElBQUk7S0FDbEMsQ0FBQyxDQUFDO0lBRUgsZ0RBQWdEO0lBQ2hELHVEQUF1RDtJQUN2RCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtRQUM5RCxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUc7UUFDZCxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQVM7UUFDMUYsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsRUFBUztRQUNsSCxhQUFhLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBQyxFQUFTO1FBQ3JKLDJCQUEyQixFQUFFLElBQUk7UUFDakMsbUJBQW1CLEVBQUUsSUFBSTtRQUN6QixJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUM3RSxDQUFDLENBQUM7SUFDSCxhQUFhLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXZDLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1FBQzlELEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRztRQUNkLGdCQUFnQixFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsRUFBUztRQUMxRixTQUFTLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBRSxFQUFFLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxFQUFTO1FBQ2xILGFBQWEsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUUsRUFBRSxDQUFDLEVBQVM7UUFDckosMkJBQTJCLEVBQUUsSUFBSTtRQUNqQyxtQkFBbUIsRUFBRSxJQUFJO1FBQ3pCLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzdFLENBQUMsQ0FBQztJQUNILGFBQWEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdkMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtRQUNoRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUc7UUFDZCxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQVM7UUFDMUYsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsRUFBUztRQUNsSCxhQUFhLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBQyxFQUFTO1FBQ3JKLDJCQUEyQixFQUFFLElBQUk7UUFDakMsbUJBQW1CLEVBQUUsS0FBSztRQUMxQixJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUM5RSxDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO1FBQ2hFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRztRQUNkLGdCQUFnQixFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsRUFBUztRQUMxRixTQUFTLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBRSxFQUFFLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxFQUFTO1FBQ2xILGFBQWEsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUUsRUFBRSxDQUFDLEVBQVM7UUFDckosMkJBQTJCLEVBQUUsSUFBSTtRQUNqQyxtQkFBbUIsRUFBRSxLQUFLO1FBQzFCLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzlFLENBQUMsQ0FBQztJQUVILE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtRQUMvRCxJQUFJLEVBQUU7WUFDSixFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNqQyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtTQUNwQztLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLDRCQUE0QixDQUFDLEtBQUssRUFBRSwyQkFBMkIsRUFBRTtRQUM3RixLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUc7S0FDZixDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRTtRQUNwRCxNQUFNLEVBQUUsS0FBSztRQUNiLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxPQUErQixDQUFDO0lBQ3BDLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUN0QixPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDOUMsTUFBTSxFQUFFLEtBQUs7WUFDYixJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO1NBQzFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtRQUM5RCxRQUFRLEVBQUUsYUFBYSxDQUFDLEdBQUc7UUFDM0IsWUFBWSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDdEMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxnQkFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ3RFLENBQUMsQ0FBQztJQUVILElBQUksV0FBMEMsQ0FBQztJQUMvQyxJQUFJLGlCQUFpQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUN4RCxRQUFRLEVBQUUsYUFBYSxDQUFDLEdBQUc7WUFDM0IsWUFBWSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0I7WUFDdEMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxnQkFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3RFLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7UUFDeEUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1FBQ2QsSUFBSSxFQUFFO1lBQ0osRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7WUFDbkMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxnQkFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRTtTQUM1RDtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtRQUM1RSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUc7UUFDZCxJQUFJLEVBQUU7WUFDSixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNwQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLEVBQUU7U0FDdEU7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7UUFDNUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1FBQ2QsSUFBSSxFQUFFO1lBQ0osRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7WUFDcEMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxnQkFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxFQUFFO1NBQ3RFO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsNEVBQTRFO0lBQzVFLDZCQUE2QjtJQUM3QixNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLDhCQUE4QixDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtRQUM3RixRQUFRLEVBQUUsYUFBYSxDQUFDLEdBQUc7UUFDM0IsWUFBWSxFQUFFLGdCQUFnQixDQUFDLEdBQUc7S0FDbkMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7UUFDN0YsUUFBUSxFQUFFLGFBQWEsQ0FBQyxHQUFHO1FBQzNCLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHO0tBQ25DLENBQUMsQ0FBQztJQUVILDhCQUE4QjtJQUM5QixNQUFNLG1CQUFtQixHQUFHLElBQUksR0FBRyxDQUFDLDhCQUE4QixDQUFDLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtRQUMvRixRQUFRLEVBQUUsY0FBYyxDQUFDLEdBQUc7UUFDNUIsWUFBWSxFQUFFLGtCQUFrQixDQUFDLEdBQUc7S0FDckMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7UUFDL0YsUUFBUSxFQUFFLGNBQWMsQ0FBQyxHQUFHO1FBQzVCLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxHQUFHO0tBQ3JDLENBQUMsQ0FBQztJQUVILGdDQUFnQztJQUNoQyxNQUFNLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDdkUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1FBQ2QsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLEdBQUc7S0FDM0IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7UUFDekQsWUFBWSxFQUFFLGdCQUFnQixDQUFDLEdBQUc7UUFDbEMsb0JBQW9CLEVBQUUsV0FBVztRQUNqQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEdBQUc7S0FDbkIsQ0FBQyxDQUFDO0lBQ0gsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1FBQzdELFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHO1FBQ2xDLHdCQUF3QixFQUFFLE1BQU07UUFDaEMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHO0tBQ25CLENBQUMsQ0FBQztJQUNILGFBQWEsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUU5QyxpQ0FBaUM7SUFDakMsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7UUFDN0QsWUFBWSxFQUFFLGtCQUFrQixDQUFDLEdBQUc7UUFDcEMsb0JBQW9CLEVBQUUsV0FBVztRQUNqQyxZQUFZLEVBQUUsV0FBVyxDQUFDLEdBQUc7S0FDOUIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxhQUF1QyxDQUFDO0lBQzVDLElBQUksaUJBQWlCLElBQUksV0FBVyxFQUFFLENBQUM7UUFDckMsYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1lBQ3ZELFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxHQUFHO1lBQ3BDLG9CQUFvQixFQUFFLFdBQVc7WUFDakMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxHQUFHO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7U0FBTSxDQUFDO1FBQ04sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1lBQ3ZELFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxHQUFHO1lBQ3BDLG9CQUFvQixFQUFFLFdBQVc7WUFDakMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxHQUFHO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1FBQ2pFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxHQUFHO1FBQ3BDLHdCQUF3QixFQUFFLE1BQU07UUFDaEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxHQUFHO0tBQzdCLENBQUMsQ0FBQztJQUVILE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7UUFDakUsWUFBWSxFQUFFLGtCQUFrQixDQUFDLEdBQUc7UUFDcEMsd0JBQXdCLEVBQUUsTUFBTTtRQUNoQyxTQUFTLEVBQUUsYUFBYSxDQUFDLEdBQUc7S0FDN0IsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNMLEdBQUc7UUFDSCxTQUFTO1FBQ1QsYUFBYTtRQUNiLGFBQWE7UUFDYixjQUFjO1FBQ2QsY0FBYztRQUNkLEdBQUc7UUFDSCxhQUFhO1FBQ2IsT0FBTztRQUNQLE9BQU87UUFDUCxXQUFXO1FBQ1gsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixrQkFBa0I7UUFDbEIsa0JBQWtCO0tBQ25CLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsS0FBZ0IsRUFBRSxVQUFrQixFQUFFLFVBQWtCLEVBQUUsaUJBQTBCO0lBQ3ZILE9BQU8sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDL0IsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sVUFBVSxTQUFTLENBQUM7UUFDNUQsTUFBTSxFQUFFLENBQUM7UUFDVCxXQUFXLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLHlDQUF5QztRQUNqRixtQkFBbUIsRUFBRTtZQUNuQjtnQkFDRSxRQUFRLEVBQUUsRUFBRTtnQkFDWixJQUFJLEVBQUUsUUFBUTtnQkFDZCxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNO2FBQ2xDO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsbUJBQW1CO2FBQy9DO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgRm4gfSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVnBjUmVzb3VyY2VzIHtcbiAgdnBjOiBlYzIuQ2ZuVlBDO1xuICB2cGNDaWRyVjY6IGVjMi5DZm5WUENDaWRyQmxvY2s7XG4gIHN1Ym5ldFB1YmxpY0E6IGVjMi5DZm5TdWJuZXQ7XG4gIHN1Ym5ldFB1YmxpY0I6IGVjMi5DZm5TdWJuZXQ7XG4gIHN1Ym5ldFByaXZhdGVBOiBlYzIuQ2ZuU3VibmV0O1xuICBzdWJuZXRQcml2YXRlQjogZWMyLkNmblN1Ym5ldDtcbiAgaWd3OiBlYzIuQ2ZuSW50ZXJuZXRHYXRld2F5O1xuICBlZ3Jlc3NPbmx5SWd3OiBlYzIuQ2ZuRWdyZXNzT25seUludGVybmV0R2F0ZXdheTtcbiAgbmF0RWlwQTogZWMyLkNmbkVJUDtcbiAgbmF0RWlwQj86IGVjMi5DZm5FSVA7XG4gIG5hdEdhdGV3YXlBOiBlYzIuQ2ZuTmF0R2F0ZXdheTtcbiAgbmF0R2F0ZXdheUI/OiBlYzIuQ2ZuTmF0R2F0ZXdheTtcbiAgcHVibGljUm91dGVUYWJsZTogZWMyLkNmblJvdXRlVGFibGU7XG4gIHByaXZhdGVSb3V0ZVRhYmxlQTogZWMyLkNmblJvdXRlVGFibGU7XG4gIHByaXZhdGVSb3V0ZVRhYmxlQjogZWMyLkNmblJvdXRlVGFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWcGNSZXNvdXJjZXMoc2NvcGU6IENvbnN0cnVjdCwgZW52VHlwZTogc3RyaW5nLCBjcmVhdGVOYXRHYXRld2F5czogYm9vbGVhbik6IFZwY1Jlc291cmNlcyB7XG4gIGNvbnN0IHN0YWNrID0gY2RrLlN0YWNrLm9mKHNjb3BlKTtcbiAgY29uc3Qgc3RhY2tOYW1lID0gRm4ucmVmKCdBV1M6OlN0YWNrTmFtZScpO1xuXG4gIC8vIERpcmVjdCBWUEMgQ0lEUiBibG9jayB2YWx1ZXMgZm9yIHNpbXBsaWNpdHlcbiAgY29uc3QgdnBjQ2lkciA9ICcxMC4wLjAuMC8xNic7XG5cbiAgY29uc3QgdnBjID0gbmV3IGVjMi5DZm5WUEMoc2NvcGUsICdWUEMnLCB7XG4gICAgY2lkckJsb2NrOiB2cGNDaWRyLFxuICAgIGVuYWJsZURuc0hvc3RuYW1lczogdHJ1ZSxcbiAgICBlbmFibGVEbnNTdXBwb3J0OiB0cnVlLFxuICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogc3RhY2tOYW1lIH1dLFxuICB9KTtcblxuICBjb25zdCB2cGNDaWRyVjYgPSBuZXcgZWMyLkNmblZQQ0NpZHJCbG9jayhzY29wZSwgJ1ZQQ0NJRFInLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgYW1hem9uUHJvdmlkZWRJcHY2Q2lkckJsb2NrOiB0cnVlLFxuICB9KTtcblxuICAvLyBVc2UgMjU2IHN1Ym5ldHMgZm9yIGZ1bGwgcGFyaXR5IHdpdGggY2ZuLmpzb25cbiAgLy8gU3VibmV0cyB1c2luZyByYXcgQ2xvdWRGb3JtYXRpb24gaW50cmluc2ljcyBmb3IgQ0lEUlxuICBjb25zdCBzdWJuZXRQdWJsaWNBID0gbmV3IGVjMi5DZm5TdWJuZXQoc2NvcGUsICdTdWJuZXRQdWJsaWNBJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIGF2YWlsYWJpbGl0eVpvbmU6IHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkdldEFac1wiOiB7IFwiUmVmXCI6IFwiQVdTOjpSZWdpb25cIiB9IH1dIH0gYXMgYW55LFxuICAgIGNpZHJCbG9jazogeyBcIkZuOjpTZWxlY3RcIjogWzAsIHsgXCJGbjo6Q2lkclwiOiBbIHsgXCJGbjo6R2V0QXR0XCI6IFt2cGMubG9naWNhbElkLCBcIkNpZHJCbG9ja1wiXSB9LCAxNiwgOCBdIH1dIH0gYXMgYW55LFxuICAgIGlwdjZDaWRyQmxvY2s6IHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkNpZHJcIjogWyB7IFwiRm46OlNlbGVjdFwiOiBbMCwgeyBcIkZuOjpHZXRBdHRcIjogW3ZwYy5sb2dpY2FsSWQsIFwiSXB2NkNpZHJCbG9ja3NcIl0gfSBdIH0sIDI1NiwgNjQgXSB9XSB9IGFzIGFueSxcbiAgICBhc3NpZ25JcHY2QWRkcmVzc09uQ3JlYXRpb246IHRydWUsXG4gICAgbWFwUHVibGljSXBPbkxhdW5jaDogdHJ1ZSxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctc3VibmV0LXB1YmxpYy1hJ10pIH1dLFxuICB9KTtcbiAgc3VibmV0UHVibGljQS5hZGREZXBlbmRlbmN5KHZwY0NpZHJWNik7XG5cbiAgY29uc3Qgc3VibmV0UHVibGljQiA9IG5ldyBlYzIuQ2ZuU3VibmV0KHNjb3BlLCAnU3VibmV0UHVibGljQicsIHtcbiAgICB2cGNJZDogdnBjLnJlZixcbiAgICBhdmFpbGFiaWxpdHlab25lOiB7IFwiRm46OlNlbGVjdFwiOiBbMSwgeyBcIkZuOjpHZXRBWnNcIjogeyBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCIgfSB9XSB9IGFzIGFueSxcbiAgICBjaWRyQmxvY2s6IHsgXCJGbjo6U2VsZWN0XCI6IFsxLCB7IFwiRm46OkNpZHJcIjogWyB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJDaWRyQmxvY2tcIl0gfSwgMTYsIDggXSB9XSB9IGFzIGFueSxcbiAgICBpcHY2Q2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMSwgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpTZWxlY3RcIjogWzAsIHsgXCJGbjo6R2V0QXR0XCI6IFt2cGMubG9naWNhbElkLCBcIklwdjZDaWRyQmxvY2tzXCJdIH0gXSB9LCAyNTYsIDY0IF0gfV0gfSBhcyBhbnksXG4gICAgYXNzaWduSXB2NkFkZHJlc3NPbkNyZWF0aW9uOiB0cnVlLFxuICAgIG1hcFB1YmxpY0lwT25MYXVuY2g6IHRydWUsXG4gICAgdGFnczogW3sga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXN1Ym5ldC1wdWJsaWMtYiddKSB9XSxcbiAgfSk7XG4gIHN1Ym5ldFB1YmxpY0IuYWRkRGVwZW5kZW5jeSh2cGNDaWRyVjYpO1xuXG4gIGNvbnN0IHN1Ym5ldFByaXZhdGVBID0gbmV3IGVjMi5DZm5TdWJuZXQoc2NvcGUsICdTdWJuZXRQcml2YXRlQScsIHtcbiAgICB2cGNJZDogdnBjLnJlZixcbiAgICBhdmFpbGFiaWxpdHlab25lOiB7IFwiRm46OlNlbGVjdFwiOiBbMCwgeyBcIkZuOjpHZXRBWnNcIjogeyBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCIgfSB9XSB9IGFzIGFueSxcbiAgICBjaWRyQmxvY2s6IHsgXCJGbjo6U2VsZWN0XCI6IFsyLCB7IFwiRm46OkNpZHJcIjogWyB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJDaWRyQmxvY2tcIl0gfSwgMTYsIDggXSB9XSB9IGFzIGFueSxcbiAgICBpcHY2Q2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMiwgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpTZWxlY3RcIjogWzAsIHsgXCJGbjo6R2V0QXR0XCI6IFt2cGMubG9naWNhbElkLCBcIklwdjZDaWRyQmxvY2tzXCJdIH0gXSB9LCAyNTYsIDY0IF0gfV0gfSBhcyBhbnksXG4gICAgYXNzaWduSXB2NkFkZHJlc3NPbkNyZWF0aW9uOiB0cnVlLFxuICAgIG1hcFB1YmxpY0lwT25MYXVuY2g6IGZhbHNlLFxuICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogRm4uam9pbignJywgW3N0YWNrTmFtZSwgJy1zdWJuZXQtcHJpdmF0ZS1hJ10pIH1dLFxuICB9KTtcblxuICBjb25zdCBzdWJuZXRQcml2YXRlQiA9IG5ldyBlYzIuQ2ZuU3VibmV0KHNjb3BlLCAnU3VibmV0UHJpdmF0ZUInLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgYXZhaWxhYmlsaXR5Wm9uZTogeyBcIkZuOjpTZWxlY3RcIjogWzEsIHsgXCJGbjo6R2V0QVpzXCI6IHsgXCJSZWZcIjogXCJBV1M6OlJlZ2lvblwiIH0gfV0gfSBhcyBhbnksXG4gICAgY2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMywgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpHZXRBdHRcIjogW3ZwYy5sb2dpY2FsSWQsIFwiQ2lkckJsb2NrXCJdIH0sIDE2LCA4IF0gfV0gfSBhcyBhbnksXG4gICAgaXB2NkNpZHJCbG9jazogeyBcIkZuOjpTZWxlY3RcIjogWzMsIHsgXCJGbjo6Q2lkclwiOiBbIHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJJcHY2Q2lkckJsb2Nrc1wiXSB9IF0gfSwgMjU2LCA2NCBdIH1dIH0gYXMgYW55LFxuICAgIGFzc2lnbklwdjZBZGRyZXNzT25DcmVhdGlvbjogdHJ1ZSxcbiAgICBtYXBQdWJsaWNJcE9uTGF1bmNoOiBmYWxzZSxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctc3VibmV0LXByaXZhdGUtYiddKSB9XSxcbiAgfSk7XG5cbiAgY29uc3QgaWd3ID0gbmV3IGVjMi5DZm5JbnRlcm5ldEdhdGV3YXkoc2NvcGUsICdJbnRlcm5ldEdhdGV3YXknLCB7XG4gICAgdGFnczogW1xuICAgICAgeyBrZXk6ICdOYW1lJywgdmFsdWU6IHN0YWNrTmFtZSB9LFxuICAgICAgeyBrZXk6ICdOZXR3b3JrJywgdmFsdWU6ICdQdWJsaWMnIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgZWdyZXNzT25seUlndyA9IG5ldyBlYzIuQ2ZuRWdyZXNzT25seUludGVybmV0R2F0ZXdheShzY29wZSwgJ0VncmVzc09ubHlJbnRlcm5ldEdhdGV3YXknLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gIH0pO1xuXG4gIGNvbnN0IG5hdEVpcEEgPSBuZXcgZWMyLkNmbkVJUChzY29wZSwgJ05hdFB1YmxpY0lQQScsIHtcbiAgICBkb21haW46ICd2cGMnLFxuICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogc3RhY2tOYW1lIH1dLFxuICB9KTtcblxuICBsZXQgbmF0RWlwQjogZWMyLkNmbkVJUCB8IHVuZGVmaW5lZDtcbiAgaWYgKGNyZWF0ZU5hdEdhdGV3YXlzKSB7XG4gICAgbmF0RWlwQiA9IG5ldyBlYzIuQ2ZuRUlQKHNjb3BlLCAnTmF0UHVibGljSVBCJywge1xuICAgICAgZG9tYWluOiAndnBjJyxcbiAgICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogc3RhY2tOYW1lIH1dLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgbmF0R2F0ZXdheUEgPSBuZXcgZWMyLkNmbk5hdEdhdGV3YXkoc2NvcGUsICdOYXRHYXRld2F5QScsIHtcbiAgICBzdWJuZXRJZDogc3VibmV0UHVibGljQS5yZWYsXG4gICAgYWxsb2NhdGlvbklkOiBuYXRFaXBBLmF0dHJBbGxvY2F0aW9uSWQsXG4gICAgdGFnczogW3sga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXN1Ym5ldC1hJ10pIH1dLFxuICB9KTtcblxuICBsZXQgbmF0R2F0ZXdheUI6IGVjMi5DZm5OYXRHYXRld2F5IHwgdW5kZWZpbmVkO1xuICBpZiAoY3JlYXRlTmF0R2F0ZXdheXMgJiYgbmF0RWlwQikge1xuICAgIG5hdEdhdGV3YXlCID0gbmV3IGVjMi5DZm5OYXRHYXRld2F5KHNjb3BlLCAnTmF0R2F0ZXdheUInLCB7XG4gICAgICBzdWJuZXRJZDogc3VibmV0UHVibGljQi5yZWYsXG4gICAgICBhbGxvY2F0aW9uSWQ6IG5hdEVpcEIuYXR0ckFsbG9jYXRpb25JZCxcbiAgICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogRm4uam9pbignJywgW3N0YWNrTmFtZSwgJy1zdWJuZXQtYiddKSB9XSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHB1YmxpY1JvdXRlVGFibGUgPSBuZXcgZWMyLkNmblJvdXRlVGFibGUoc2NvcGUsICdQdWJsaWNSb3V0ZVRhYmxlJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIHRhZ3M6IFtcbiAgICAgIHsga2V5OiAnTmV0d29yaycsIHZhbHVlOiAnUHVibGljJyB9LFxuICAgICAgeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctcHVibGljJ10pIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgcHJpdmF0ZVJvdXRlVGFibGVBID0gbmV3IGVjMi5DZm5Sb3V0ZVRhYmxlKHNjb3BlLCAnUHJpdmF0ZVJvdXRlVGFibGVBJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIHRhZ3M6IFtcbiAgICAgIHsga2V5OiAnTmV0d29yaycsIHZhbHVlOiAnUHJpdmF0ZScgfSxcbiAgICAgIHsga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXByaXZhdGUtc3VibmV0LWEnXSkgfSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCBwcml2YXRlUm91dGVUYWJsZUIgPSBuZXcgZWMyLkNmblJvdXRlVGFibGUoc2NvcGUsICdQcml2YXRlUm91dGVUYWJsZUInLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgdGFnczogW1xuICAgICAgeyBrZXk6ICdOZXR3b3JrJywgdmFsdWU6ICdQcml2YXRlJyB9LFxuICAgICAgeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctcHJpdmF0ZS1zdWJuZXQtYiddKSB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIC8vIEFkZCBleHBsaWNpdCByb3V0ZSB0YWJsZSBhc3NvY2lhdGlvbnMgYW5kIHJvdXRlcyBmb3IgcGFyaXR5IHdpdGggY2ZuLmpzb25cbiAgLy8gUHVibGljIHN1Ym5ldCBhc3NvY2lhdGlvbnNcbiAgY29uc3Qgc3VibmV0UHVibGljQUFzc29jID0gbmV3IGVjMi5DZm5TdWJuZXRSb3V0ZVRhYmxlQXNzb2NpYXRpb24oc2NvcGUsICdTdWJuZXRQdWJsaWNBQXNzb2MnLCB7XG4gICAgc3VibmV0SWQ6IHN1Ym5ldFB1YmxpY0EucmVmLFxuICAgIHJvdXRlVGFibGVJZDogcHVibGljUm91dGVUYWJsZS5yZWYsXG4gIH0pO1xuXG4gIGNvbnN0IHN1Ym5ldFB1YmxpY0JBc3NvYyA9IG5ldyBlYzIuQ2ZuU3VibmV0Um91dGVUYWJsZUFzc29jaWF0aW9uKHNjb3BlLCAnU3VibmV0UHVibGljQkFzc29jJywge1xuICAgIHN1Ym5ldElkOiBzdWJuZXRQdWJsaWNCLnJlZixcbiAgICByb3V0ZVRhYmxlSWQ6IHB1YmxpY1JvdXRlVGFibGUucmVmLFxuICB9KTtcblxuICAvLyBQcml2YXRlIHN1Ym5ldCBhc3NvY2lhdGlvbnNcbiAgY29uc3Qgc3VibmV0UHJpdmF0ZUFBc3NvYyA9IG5ldyBlYzIuQ2ZuU3VibmV0Um91dGVUYWJsZUFzc29jaWF0aW9uKHNjb3BlLCAnU3VibmV0UHJpdmF0ZUFBc3NvYycsIHtcbiAgICBzdWJuZXRJZDogc3VibmV0UHJpdmF0ZUEucmVmLFxuICAgIHJvdXRlVGFibGVJZDogcHJpdmF0ZVJvdXRlVGFibGVBLnJlZixcbiAgfSk7XG5cbiAgY29uc3Qgc3VibmV0UHJpdmF0ZUJBc3NvYyA9IG5ldyBlYzIuQ2ZuU3VibmV0Um91dGVUYWJsZUFzc29jaWF0aW9uKHNjb3BlLCAnU3VibmV0UHJpdmF0ZUJBc3NvYycsIHtcbiAgICBzdWJuZXRJZDogc3VibmV0UHJpdmF0ZUIucmVmLFxuICAgIHJvdXRlVGFibGVJZDogcHJpdmF0ZVJvdXRlVGFibGVCLnJlZixcbiAgfSk7XG5cbiAgLy8gUHVibGljIHJvdXRlcyAoSVB2NCBhbmQgSVB2NilcbiAgY29uc3QgdnBjSWd3QXR0YWNobWVudCA9IG5ldyBlYzIuQ2ZuVlBDR2F0ZXdheUF0dGFjaG1lbnQoc2NvcGUsICdWUENJRycsIHtcbiAgICB2cGNJZDogdnBjLnJlZixcbiAgICBpbnRlcm5ldEdhdGV3YXlJZDogaWd3LnJlZixcbiAgfSk7XG5cbiAgY29uc3QgcHVibGljUm91dGUgPSBuZXcgZWMyLkNmblJvdXRlKHNjb3BlLCAnUHVibGljUm91dGUnLCB7XG4gICAgcm91dGVUYWJsZUlkOiBwdWJsaWNSb3V0ZVRhYmxlLnJlZixcbiAgICBkZXN0aW5hdGlvbkNpZHJCbG9jazogJzAuMC4wLjAvMCcsXG4gICAgZ2F0ZXdheUlkOiBpZ3cucmVmLFxuICB9KTtcbiAgcHVibGljUm91dGUuYWRkRGVwZW5kZW5jeSh2cGNJZ3dBdHRhY2htZW50KTtcblxuICBjb25zdCBwdWJsaWNSb3V0ZVY2ID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1B1YmxpY1JvdXRlVjYnLCB7XG4gICAgcm91dGVUYWJsZUlkOiBwdWJsaWNSb3V0ZVRhYmxlLnJlZixcbiAgICBkZXN0aW5hdGlvbklwdjZDaWRyQmxvY2s6ICc6Oi8wJyxcbiAgICBnYXRld2F5SWQ6IGlndy5yZWYsXG4gIH0pO1xuICBwdWJsaWNSb3V0ZVY2LmFkZERlcGVuZGVuY3kodnBjSWd3QXR0YWNobWVudCk7XG5cbiAgLy8gUHJpdmF0ZSByb3V0ZXMgKElQdjQgYW5kIElQdjYpXG4gIGNvbnN0IHByaXZhdGVSb3V0ZUEgPSBuZXcgZWMyLkNmblJvdXRlKHNjb3BlLCAnUHJpdmF0ZVJvdXRlQScsIHtcbiAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQS5yZWYsXG4gICAgZGVzdGluYXRpb25DaWRyQmxvY2s6ICcwLjAuMC4wLzAnLFxuICAgIG5hdEdhdGV3YXlJZDogbmF0R2F0ZXdheUEucmVmLFxuICB9KTtcblxuICBsZXQgcHJpdmF0ZVJvdXRlQjogZWMyLkNmblJvdXRlIHwgdW5kZWZpbmVkO1xuICBpZiAoY3JlYXRlTmF0R2F0ZXdheXMgJiYgbmF0R2F0ZXdheUIpIHtcbiAgICBwcml2YXRlUm91dGVCID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1ByaXZhdGVSb3V0ZUInLCB7XG4gICAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQi5yZWYsXG4gICAgICBkZXN0aW5hdGlvbkNpZHJCbG9jazogJzAuMC4wLjAvMCcsXG4gICAgICBuYXRHYXRld2F5SWQ6IG5hdEdhdGV3YXlCLnJlZixcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBwcml2YXRlUm91dGVCID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1ByaXZhdGVSb3V0ZUInLCB7XG4gICAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQi5yZWYsXG4gICAgICBkZXN0aW5hdGlvbkNpZHJCbG9jazogJzAuMC4wLjAvMCcsXG4gICAgICBuYXRHYXRld2F5SWQ6IG5hdEdhdGV3YXlBLnJlZixcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHByaXZhdGVSb3V0ZVY2QSA9IG5ldyBlYzIuQ2ZuUm91dGUoc2NvcGUsICdQcml2YXRlUm91dGVWNkEnLCB7XG4gICAgcm91dGVUYWJsZUlkOiBwcml2YXRlUm91dGVUYWJsZUEucmVmLFxuICAgIGRlc3RpbmF0aW9uSXB2NkNpZHJCbG9jazogJzo6LzAnLFxuICAgIGdhdGV3YXlJZDogZWdyZXNzT25seUlndy5yZWYsXG4gIH0pO1xuXG4gIGNvbnN0IHByaXZhdGVSb3V0ZVY2QiA9IG5ldyBlYzIuQ2ZuUm91dGUoc2NvcGUsICdQcml2YXRlUm91dGVWNkInLCB7XG4gICAgcm91dGVUYWJsZUlkOiBwcml2YXRlUm91dGVUYWJsZUIucmVmLFxuICAgIGRlc3RpbmF0aW9uSXB2NkNpZHJCbG9jazogJzo6LzAnLFxuICAgIGdhdGV3YXlJZDogZWdyZXNzT25seUlndy5yZWYsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdnBjLFxuICAgIHZwY0NpZHJWNixcbiAgICBzdWJuZXRQdWJsaWNBLFxuICAgIHN1Ym5ldFB1YmxpY0IsXG4gICAgc3VibmV0UHJpdmF0ZUEsXG4gICAgc3VibmV0UHJpdmF0ZUIsXG4gICAgaWd3LFxuICAgIGVncmVzc09ubHlJZ3csXG4gICAgbmF0RWlwQSxcbiAgICBuYXRFaXBCLFxuICAgIG5hdEdhdGV3YXlBLFxuICAgIG5hdEdhdGV3YXlCLFxuICAgIHB1YmxpY1JvdXRlVGFibGUsXG4gICAgcHJpdmF0ZVJvdXRlVGFibGVBLFxuICAgIHByaXZhdGVSb3V0ZVRhYmxlQixcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZwY0wyUmVzb3VyY2VzKHNjb3BlOiBDb25zdHJ1Y3QsIHZwY01ham9ySWQ6IG51bWJlciwgdnBjTWlub3JJZDogbnVtYmVyLCBjcmVhdGVOYXRHYXRld2F5czogYm9vbGVhbik6IGVjMi5WcGMge1xuICByZXR1cm4gbmV3IGVjMi5WcGMoc2NvcGUsICdWcGMnLCB7XG4gICAgaXBBZGRyZXNzZXM6IGVjMi5JcEFkZHJlc3Nlcy5jaWRyKGAxMC4ke3ZwY01ham9ySWR9LjAuMC8xNmApLFxuICAgIG1heEF6czogMixcbiAgICBuYXRHYXRld2F5czogY3JlYXRlTmF0R2F0ZXdheXMgPyAyIDogMSwgLy8gMSBOQVQgR2F0ZXdheSBhbHdheXMsIDIgZm9yIHJlZHVuZGFuY3lcbiAgICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAgICB7XG4gICAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgbmFtZTogJ3B1YmxpYycsXG4gICAgICAgIHN1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgbmFtZTogJ3ByaXZhdGUnLFxuICAgICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QUklWQVRFX1dJVEhfRUdSRVNTLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbn1cbiJdfQ==