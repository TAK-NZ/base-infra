"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVpcResources = createVpcResources;
exports.createVpcL2Resources = createVpcL2Resources;
const cdk = __importStar(require("aws-cdk-lib"));
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const aws_cdk_lib_1 = require("aws-cdk-lib");
function createVpcResources(scope, envType) {
    const isProd = envType === 'prod';
    const stack = cdk.Stack.of(scope);
    const stackName = aws_cdk_lib_1.Fn.ref('AWS::StackName');
    // Direct VPC CIDR block values for simplicity
    const vpcCidr = '10.0.0.0/16';
    const vpc = new ec2.CfnVPC(scope, 'VPC', {
        cidrBlock: vpcCidr,
        enableDnsHostnames: true,
        enableDnsSupport: true,
        tags: [{ key: 'Name', value: stackName }],
    });
    const vpcCidrV6 = new ec2.CfnVPCCidrBlock(scope, 'VPCCIDR', {
        vpcId: vpc.ref,
        amazonProvidedIpv6CidrBlock: true,
    });
    // Use 256 subnets for full parity with cfn.json
    // Subnets using raw CloudFormation intrinsics for CIDR
    const subnetPublicA = new ec2.CfnSubnet(scope, 'SubnetPublicA', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [0, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [0, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: true,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-public-a']) }],
    });
    subnetPublicA.addDependency(vpcCidrV6);
    const subnetPublicB = new ec2.CfnSubnet(scope, 'SubnetPublicB', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [1, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [1, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: true,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-public-b']) }],
    });
    subnetPublicB.addDependency(vpcCidrV6);
    const subnetPrivateA = new ec2.CfnSubnet(scope, 'SubnetPrivateA', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [2, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [2, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: false,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-private-a']) }],
    });
    const subnetPrivateB = new ec2.CfnSubnet(scope, 'SubnetPrivateB', {
        vpcId: vpc.ref,
        availabilityZone: { "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "AWS::Region" } }] },
        cidrBlock: { "Fn::Select": [3, { "Fn::Cidr": [{ "Fn::GetAtt": [vpc.logicalId, "CidrBlock"] }, 16, 8] }] },
        ipv6CidrBlock: { "Fn::Select": [3, { "Fn::Cidr": [{ "Fn::Select": [0, { "Fn::GetAtt": [vpc.logicalId, "Ipv6CidrBlocks"] }] }, 256, 64] }] },
        assignIpv6AddressOnCreation: true,
        mapPublicIpOnLaunch: false,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-private-b']) }],
    });
    const igw = new ec2.CfnInternetGateway(scope, 'InternetGateway', {
        tags: [
            { key: 'Name', value: stackName },
            { key: 'Network', value: 'Public' },
        ],
    });
    const egressOnlyIgw = new ec2.CfnEgressOnlyInternetGateway(scope, 'EgressOnlyInternetGateway', {
        vpcId: vpc.ref,
    });
    const natEipA = new ec2.CfnEIP(scope, 'NatPublicIPA', {
        domain: 'vpc',
        tags: [{ key: 'Name', value: stackName }],
    });
    let natEipB;
    if (isProd) {
        natEipB = new ec2.CfnEIP(scope, 'NatPublicIPB', {
            domain: 'vpc',
            tags: [{ key: 'Name', value: stackName }],
        });
    }
    const natGatewayA = new ec2.CfnNatGateway(scope, 'NatGatewayA', {
        subnetId: subnetPublicA.ref,
        allocationId: natEipA.attrAllocationId,
        tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-a']) }],
    });
    let natGatewayB;
    if (isProd && natEipB) {
        natGatewayB = new ec2.CfnNatGateway(scope, 'NatGatewayB', {
            subnetId: subnetPublicB.ref,
            allocationId: natEipB.attrAllocationId,
            tags: [{ key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-subnet-b']) }],
        });
    }
    const publicRouteTable = new ec2.CfnRouteTable(scope, 'PublicRouteTable', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Public' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-public']) },
        ],
    });
    const privateRouteTableA = new ec2.CfnRouteTable(scope, 'PrivateRouteTableA', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Private' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-private-subnet-a']) },
        ],
    });
    const privateRouteTableB = new ec2.CfnRouteTable(scope, 'PrivateRouteTableB', {
        vpcId: vpc.ref,
        tags: [
            { key: 'Network', value: 'Private' },
            { key: 'Name', value: aws_cdk_lib_1.Fn.join('', [stackName, '-private-subnet-b']) },
        ],
    });
    let endpointSg;
    if (isProd) {
        endpointSg = new ec2.CfnSecurityGroup(scope, 'EndpointSecurityGroup', {
            groupName: `${stackName}-endpoint-sg`,
            groupDescription: 'Access to Endpoint services',
            vpcId: vpc.ref,
            securityGroupIngress: [{
                    ipProtocol: 'tcp',
                    fromPort: 443,
                    toPort: 443,
                    cidrIp: aws_cdk_lib_1.Fn.getAtt(vpc.logicalId, 'CidrBlock'),
                }],
            tags: [{ key: 'Name', value: `${stackName}-endpoint-sg` }],
        });
    }
    // Add explicit route table associations and routes for parity with cfn.json
    // Public subnet associations
    const subnetPublicAAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPublicAAssoc', {
        subnetId: subnetPublicA.ref,
        routeTableId: publicRouteTable.ref,
    });
    const subnetPublicBAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPublicBAssoc', {
        subnetId: subnetPublicB.ref,
        routeTableId: publicRouteTable.ref,
    });
    // Private subnet associations
    const subnetPrivateAAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPrivateAAssoc', {
        subnetId: subnetPrivateA.ref,
        routeTableId: privateRouteTableA.ref,
    });
    const subnetPrivateBAssoc = new ec2.CfnSubnetRouteTableAssociation(scope, 'SubnetPrivateBAssoc', {
        subnetId: subnetPrivateB.ref,
        routeTableId: privateRouteTableB.ref,
    });
    // Public routes (IPv4 and IPv6)
    const vpcIgwAttachment = new ec2.CfnVPCGatewayAttachment(scope, 'VPCIG', {
        vpcId: vpc.ref,
        internetGatewayId: igw.ref,
    });
    const publicRoute = new ec2.CfnRoute(scope, 'PublicRoute', {
        routeTableId: publicRouteTable.ref,
        destinationCidrBlock: '0.0.0.0/0',
        gatewayId: igw.ref,
    });
    publicRoute.addDependency(vpcIgwAttachment);
    const publicRouteV6 = new ec2.CfnRoute(scope, 'PublicRouteV6', {
        routeTableId: publicRouteTable.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: igw.ref,
    });
    publicRouteV6.addDependency(vpcIgwAttachment);
    // Private routes (IPv4 and IPv6)
    const privateRouteA = new ec2.CfnRoute(scope, 'PrivateRouteA', {
        routeTableId: privateRouteTableA.ref,
        destinationCidrBlock: '0.0.0.0/0',
        natGatewayId: natGatewayA.ref,
    });
    let privateRouteB;
    if (isProd && natGatewayB) {
        privateRouteB = new ec2.CfnRoute(scope, 'PrivateRouteB', {
            routeTableId: privateRouteTableB.ref,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId: natGatewayB.ref,
        });
    }
    else {
        privateRouteB = new ec2.CfnRoute(scope, 'PrivateRouteB', {
            routeTableId: privateRouteTableB.ref,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId: natGatewayA.ref,
        });
    }
    const privateRouteV6A = new ec2.CfnRoute(scope, 'PrivateRouteV6A', {
        routeTableId: privateRouteTableA.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: egressOnlyIgw.ref,
    });
    const privateRouteV6B = new ec2.CfnRoute(scope, 'PrivateRouteV6B', {
        routeTableId: privateRouteTableB.ref,
        destinationIpv6CidrBlock: '::/0',
        gatewayId: egressOnlyIgw.ref,
    });
    return {
        vpc,
        vpcCidrV6,
        subnetPublicA,
        subnetPublicB,
        subnetPrivateA,
        subnetPrivateB,
        igw,
        egressOnlyIgw,
        natEipA,
        natEipB,
        natGatewayA,
        natGatewayB,
        publicRouteTable,
        privateRouteTableA,
        privateRouteTableB,
        endpointSg,
    };
}
function createVpcL2Resources(scope, vpcMajorId, vpcMinorId) {
    return new ec2.Vpc(scope, 'Vpc', {
        ipAddresses: ec2.IpAddresses.cidr(`10.${vpcMajorId}.0.0/16`),
        maxAzs: 2,
        subnetConfiguration: [
            {
                cidrMask: 24,
                name: 'public',
                subnetType: ec2.SubnetType.PUBLIC,
            },
            {
                cidrMask: 24,
                name: 'private',
                subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
            },
        ],
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsZ0RBOE9DO0FBRUQsb0RBaUJDO0FBelJELGlEQUFtQztBQUNuQyx5REFBMkM7QUFFM0MsNkNBQWlDO0FBcUJqQyxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLE9BQWU7SUFDbEUsTUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLE1BQU0sQ0FBQztJQUNsQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxnQkFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTNDLDhDQUE4QztJQUM5QyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUM7SUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDdkMsU0FBUyxFQUFFLE9BQU87UUFDbEIsa0JBQWtCLEVBQUUsSUFBSTtRQUN4QixnQkFBZ0IsRUFBRSxJQUFJO1FBQ3RCLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDMUQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1FBQ2QsMkJBQTJCLEVBQUUsSUFBSTtLQUNsQyxDQUFDLENBQUM7SUFFSCxnREFBZ0Q7SUFDaEQsdURBQXVEO0lBQ3ZELE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO1FBQzlELEtBQUssRUFBRSxHQUFHLENBQUMs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RixPQUFPLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQy9CLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLFVBQVUsU0FBUyxDQUFDO1FBQzVELE1BQU0sRUFBRSxDQUFDO1FBQ1QsbUJBQW1CLEVBQUU7WUFDbkI7Z0JBQ0UsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTTthQUNsQztZQUNEO2dCQUNFLFFBQVEsRUFBRSxFQUFFO2dCQUNaLElBQUksRUFBRSxTQUFTO2dCQUNmLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLG1CQUFtQjthQUMvQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEZuIH0gZnJvbSAnYXdzLWNkay1saWInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZwY1Jlc291cmNlcyB7XG4gIHZwYzogZWMyLkNmblZQQztcbiAgdnBjQ2lkclY2OiBlYzIuQ2ZuVlBDQ2lkckJsb2NrO1xuICBzdWJuZXRQdWJsaWNBOiBlYzIuQ2ZuU3VibmV0O1xuICBzdWJuZXRQdWJsaWNCOiBlYzIuQ2ZuU3VibmV0O1xuICBzdWJuZXRQcml2YXRlQTogZWMyLkNmblN1Ym5ldDtcbiAgc3VibmV0UHJpdmF0ZUI6IGVjMi5DZm5TdWJuZXQ7XG4gIGlndzogZWMyLkNmbkludGVybmV0R2F0ZXdheTtcbiAgZWdyZXNzT25seUlndzogZWMyLkNmbkVncmVzc09ubHlJbnRlcm5ldEdhdGV3YXk7XG4gIG5hdEVpcEE6IGVjMi5DZm5FSVA7XG4gIG5hdEVpcEI/OiBlYzIuQ2ZuRUlQO1xuICBuYXRHYXRld2F5QTogZWMyLkNmbk5hdEdhdGV3YXk7XG4gIG5hdEdhdGV3YXlCPzogZWMyLkNmbk5hdEdhdGV3YXk7XG4gIHB1YmxpY1JvdXRlVGFibGU6IGVjMi5DZm5Sb3V0ZVRhYmxlO1xuICBwcml2YXRlUm91dGVUYWJsZUE6IGVjMi5DZm5Sb3V0ZVRhYmxlO1xuICBwcml2YXRlUm91dGVUYWJsZUI6IGVjMi5DZm5Sb3V0ZVRhYmxlO1xuICBlbmRwb2ludFNnPzogZWMyLkNmblNlY3VyaXR5R3JvdXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWcGNSZXNvdXJjZXMoc2NvcGU6IENvbnN0cnVjdCwgZW52VHlwZTogc3RyaW5nKTogVnBjUmVzb3VyY2VzIHtcbiAgY29uc3QgaXNQcm9kID0gZW52VHlwZSA9PT0gJ3Byb2QnO1xuICBjb25zdCBzdGFjayA9IGNkay5TdGFjay5vZihzY29wZSk7XG4gIGNvbnN0IHN0YWNrTmFtZSA9IEZuLnJlZignQVdTOjpTdGFja05hbWUnKTtcblxuICAvLyBEaXJlY3QgVlBDIENJRFIgYmxvY2sgdmFsdWVzIGZvciBzaW1wbGljaXR5XG4gIGNvbnN0IHZwY0NpZHIgPSAnMTAuMC4wLjAvMTYnO1xuXG4gIGNvbnN0IHZwYyA9IG5ldyBlYzIuQ2ZuVlBDKHNjb3BlLCAnVlBDJywge1xuICAgIGNpZHJCbG9jazogdnBjQ2lkcixcbiAgICBlbmFibGVEbnNIb3N0bmFtZXM6IHRydWUsXG4gICAgZW5hYmxlRG5zU3VwcG9ydDogdHJ1ZSxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IHN0YWNrTmFtZSB9XSxcbiAgfSk7XG5cbiAgY29uc3QgdnBjQ2lkclY2ID0gbmV3IGVjMi5DZm5WUENDaWRyQmxvY2soc2NvcGUsICdWUENDSURSJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIGFtYXpvblByb3ZpZGVkSXB2NkNpZHJCbG9jazogdHJ1ZSxcbiAgfSk7XG5cbiAgLy8gVXNlIDI1NiBzdWJuZXRzIGZvciBmdWxsIHBhcml0eSB3aXRoIGNmbi5qc29uXG4gIC8vIFN1Ym5ldHMgdXNpbmcgcmF3IENsb3VkRm9ybWF0aW9uIGludHJpbnNpY3MgZm9yIENJRFJcbiAgY29uc3Qgc3VibmV0UHVibGljQSA9IG5ldyBlYzIuQ2ZuU3VibmV0KHNjb3BlLCAnU3VibmV0UHVibGljQScsIHtcbiAgICB2cGNJZDogdnBjLnJlZixcbiAgICBhdmFpbGFiaWxpdHlab25lOiB7IFwiRm46OlNlbGVjdFwiOiBbMCwgeyBcIkZuOjpHZXRBWnNcIjogeyBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCIgfSB9XSB9IGFzIGFueSxcbiAgICBjaWRyQmxvY2s6IHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkNpZHJcIjogWyB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJDaWRyQmxvY2tcIl0gfSwgMTYsIDggXSB9XSB9IGFzIGFueSxcbiAgICBpcHY2Q2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMCwgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpTZWxlY3RcIjogWzAsIHsgXCJGbjo6R2V0QXR0XCI6IFt2cGMubG9naWNhbElkLCBcIklwdjZDaWRyQmxvY2tzXCJdIH0gXSB9LCAyNTYsIDY0IF0gfV0gfSBhcyBhbnksXG4gICAgYXNzaWduSXB2NkFkZHJlc3NPbkNyZWF0aW9uOiB0cnVlLFxuICAgIG1hcFB1YmxpY0lwT25MYXVuY2g6IHRydWUsXG4gICAgdGFnczogW3sga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXN1Ym5ldC1wdWJsaWMtYSddKSB9XSxcbiAgfSk7XG4gIHN1Ym5ldFB1YmxpY0EuYWRkRGVwZW5kZW5jeSh2cGNDaWRyVjYpO1xuXG4gIGNvbnN0IHN1Ym5ldFB1YmxpY0IgPSBuZXcgZWMyLkNmblN1Ym5ldChzY29wZSwgJ1N1Ym5ldFB1YmxpY0InLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgYXZhaWxhYmlsaXR5Wm9uZTogeyBcIkZuOjpTZWxlY3RcIjogWzEsIHsgXCJGbjo6R2V0QVpzXCI6IHsgXCJSZWZcIjogXCJBV1M6OlJlZ2lvblwiIH0gfV0gfSBhcyBhbnksXG4gICAgY2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMSwgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpHZXRBdHRcIjogW3ZwYy5sb2dpY2FsSWQsIFwiQ2lkckJsb2NrXCJdIH0sIDE2LCA4IF0gfV0gfSBhcyBhbnksXG4gICAgaXB2NkNpZHJCbG9jazogeyBcIkZuOjpTZWxlY3RcIjogWzEsIHsgXCJGbjo6Q2lkclwiOiBbIHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJJcHY2Q2lkckJsb2Nrc1wiXSB9IF0gfSwgMjU2LCA2NCBdIH1dIH0gYXMgYW55LFxuICAgIGFzc2lnbklwdjZBZGRyZXNzT25DcmVhdGlvbjogdHJ1ZSxcbiAgICBtYXBQdWJsaWNJcE9uTGF1bmNoOiB0cnVlLFxuICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogRm4uam9pbignJywgW3N0YWNrTmFtZSwgJy1zdWJuZXQtcHVibGljLWInXSkgfV0sXG4gIH0pO1xuICBzdWJuZXRQdWJsaWNCLmFkZERlcGVuZGVuY3kodnBjQ2lkclY2KTtcblxuICBjb25zdCBzdWJuZXRQcml2YXRlQSA9IG5ldyBlYzIuQ2ZuU3VibmV0KHNjb3BlLCAnU3VibmV0UHJpdmF0ZUEnLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgYXZhaWxhYmlsaXR5Wm9uZTogeyBcIkZuOjpTZWxlY3RcIjogWzAsIHsgXCJGbjo6R2V0QVpzXCI6IHsgXCJSZWZcIjogXCJBV1M6OlJlZ2lvblwiIH0gfV0gfSBhcyBhbnksXG4gICAgY2lkckJsb2NrOiB7IFwiRm46OlNlbGVjdFwiOiBbMiwgeyBcIkZuOjpDaWRyXCI6IFsgeyBcIkZuOjpHZXRBdHRcIjogW3ZwYy5sb2dpY2FsSWQsIFwiQ2lkckJsb2NrXCJdIH0sIDE2LCA4IF0gfV0gfSBhcyBhbnksXG4gICAgaXB2NkNpZHJCbG9jazogeyBcIkZuOjpTZWxlY3RcIjogWzIsIHsgXCJGbjo6Q2lkclwiOiBbIHsgXCJGbjo6U2VsZWN0XCI6IFswLCB7IFwiRm46OkdldEF0dFwiOiBbdnBjLmxvZ2ljYWxJZCwgXCJJcHY2Q2lkckJsb2Nrc1wiXSB9IF0gfSwgMjU2LCA2NCBdIH1dIH0gYXMgYW55LFxuICAgIGFzc2lnbklwdjZBZGRyZXNzT25DcmVhdGlvbjogdHJ1ZSxcbiAgICBtYXBQdWJsaWNJcE9uTGF1bmNoOiBmYWxzZSxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctc3VibmV0LXByaXZhdGUtYSddKSB9XSxcbiAgfSk7XG5cbiAgY29uc3Qgc3VibmV0UHJpdmF0ZUIgPSBuZXcgZWMyLkNmblN1Ym5ldChzY29wZSwgJ1N1Ym5ldFByaXZhdGVCJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIGF2YWlsYWJpbGl0eVpvbmU6IHsgXCJGbjo6U2VsZWN0XCI6IFsxLCB7IFwiRm46OkdldEFac1wiOiB7IFwiUmVmXCI6IFwiQVdTOjpSZWdpb25cIiB9IH1dIH0gYXMgYW55LFxuICAgIGNpZHJCbG9jazogeyBcIkZuOjpTZWxlY3RcIjogWzMsIHsgXCJGbjo6Q2lkclwiOiBbIHsgXCJGbjo6R2V0QXR0XCI6IFt2cGMubG9naWNhbElkLCBcIkNpZHJCbG9ja1wiXSB9LCAxNiwgOCBdIH1dIH0gYXMgYW55LFxuICAgIGlwdjZDaWRyQmxvY2s6IHsgXCJGbjo6U2VsZWN0XCI6IFszLCB7IFwiRm46OkNpZHJcIjogWyB7IFwiRm46OlNlbGVjdFwiOiBbMCwgeyBcIkZuOjpHZXRBdHRcIjogW3ZwYy5sb2dpY2FsSWQsIFwiSXB2NkNpZHJCbG9ja3NcIl0gfSBdIH0sIDI1NiwgNjQgXSB9XSB9IGFzIGFueSxcbiAgICBhc3NpZ25JcHY2QWRkcmVzc09uQ3JlYXRpb246IHRydWUsXG4gICAgbWFwUHVibGljSXBPbkxhdW5jaDogZmFsc2UsXG4gICAgdGFnczogW3sga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXN1Ym5ldC1wcml2YXRlLWInXSkgfV0sXG4gIH0pO1xuXG4gIGNvbnN0IGlndyA9IG5ldyBlYzIuQ2ZuSW50ZXJuZXRHYXRld2F5KHNjb3BlLCAnSW50ZXJuZXRHYXRld2F5Jywge1xuICAgIHRhZ3M6IFtcbiAgICAgIHsga2V5OiAnTmFtZScsIHZhbHVlOiBzdGFja05hbWUgfSxcbiAgICAgIHsga2V5OiAnTmV0d29yaycsIHZhbHVlOiAnUHVibGljJyB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGNvbnN0IGVncmVzc09ubHlJZ3cgPSBuZXcgZWMyLkNmbkVncmVzc09ubHlJbnRlcm5ldEdhdGV3YXkoc2NvcGUsICdFZ3Jlc3NPbmx5SW50ZXJuZXRHYXRld2F5Jywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICB9KTtcblxuICBjb25zdCBuYXRFaXBBID0gbmV3IGVjMi5DZm5FSVAoc2NvcGUsICdOYXRQdWJsaWNJUEEnLCB7XG4gICAgZG9tYWluOiAndnBjJyxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IHN0YWNrTmFtZSB9XSxcbiAgfSk7XG5cbiAgbGV0IG5hdEVpcEI6IGVjMi5DZm5FSVAgfCB1bmRlZmluZWQ7XG4gIGlmIChpc1Byb2QpIHtcbiAgICBuYXRFaXBCID0gbmV3IGVjMi5DZm5FSVAoc2NvcGUsICdOYXRQdWJsaWNJUEInLCB7XG4gICAgICBkb21haW46ICd2cGMnLFxuICAgICAgdGFnczogW3sga2V5OiAnTmFtZScsIHZhbHVlOiBzdGFja05hbWUgfV0sXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBuYXRHYXRld2F5QSA9IG5ldyBlYzIuQ2ZuTmF0R2F0ZXdheShzY29wZSwgJ05hdEdhdGV3YXlBJywge1xuICAgIHN1Ym5ldElkOiBzdWJuZXRQdWJsaWNBLnJlZixcbiAgICBhbGxvY2F0aW9uSWQ6IG5hdEVpcEEuYXR0ckFsbG9jYXRpb25JZCxcbiAgICB0YWdzOiBbeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctc3VibmV0LWEnXSkgfV0sXG4gIH0pO1xuXG4gIGxldCBuYXRHYXRld2F5QjogZWMyLkNmbk5hdEdhdGV3YXkgfCB1bmRlZmluZWQ7XG4gIGlmIChpc1Byb2QgJiYgbmF0RWlwQikge1xuICAgIG5hdEdhdGV3YXlCID0gbmV3IGVjMi5DZm5OYXRHYXRld2F5KHNjb3BlLCAnTmF0R2F0ZXdheUInLCB7XG4gICAgICBzdWJuZXRJZDogc3VibmV0UHVibGljQi5yZWYsXG4gICAgICBhbGxvY2F0aW9uSWQ6IG5hdEVpcEIuYXR0ckFsbG9jYXRpb25JZCxcbiAgICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogRm4uam9pbignJywgW3N0YWNrTmFtZSwgJy1zdWJuZXQtYiddKSB9XSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHB1YmxpY1JvdXRlVGFibGUgPSBuZXcgZWMyLkNmblJvdXRlVGFibGUoc2NvcGUsICdQdWJsaWNSb3V0ZVRhYmxlJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIHRhZ3M6IFtcbiAgICAgIHsga2V5OiAnTmV0d29yaycsIHZhbHVlOiAnUHVibGljJyB9LFxuICAgICAgeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctcHVibGljJ10pIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgcHJpdmF0ZVJvdXRlVGFibGVBID0gbmV3IGVjMi5DZm5Sb3V0ZVRhYmxlKHNjb3BlLCAnUHJpdmF0ZVJvdXRlVGFibGVBJywge1xuICAgIHZwY0lkOiB2cGMucmVmLFxuICAgIHRhZ3M6IFtcbiAgICAgIHsga2V5OiAnTmV0d29yaycsIHZhbHVlOiAnUHJpdmF0ZScgfSxcbiAgICAgIHsga2V5OiAnTmFtZScsIHZhbHVlOiBGbi5qb2luKCcnLCBbc3RhY2tOYW1lLCAnLXByaXZhdGUtc3VibmV0LWEnXSkgfSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCBwcml2YXRlUm91dGVUYWJsZUIgPSBuZXcgZWMyLkNmblJvdXRlVGFibGUoc2NvcGUsICdQcml2YXRlUm91dGVUYWJsZUInLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgdGFnczogW1xuICAgICAgeyBrZXk6ICdOZXR3b3JrJywgdmFsdWU6ICdQcml2YXRlJyB9LFxuICAgICAgeyBrZXk6ICdOYW1lJywgdmFsdWU6IEZuLmpvaW4oJycsIFtzdGFja05hbWUsICctcHJpdmF0ZS1zdWJuZXQtYiddKSB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGxldCBlbmRwb2ludFNnOiBlYzIuQ2ZuU2VjdXJpdHlHcm91cCB8IHVuZGVmaW5lZDtcbiAgaWYgKGlzUHJvZCkge1xuICAgIGVuZHBvaW50U2cgPSBuZXcgZWMyLkNmblNlY3VyaXR5R3JvdXAoc2NvcGUsICdFbmRwb2ludFNlY3VyaXR5R3JvdXAnLCB7XG4gICAgICBncm91cE5hbWU6IGAke3N0YWNrTmFtZX0tZW5kcG9pbnQtc2dgLFxuICAgICAgZ3JvdXBEZXNjcmlwdGlvbjogJ0FjY2VzcyB0byBFbmRwb2ludCBzZXJ2aWNlcycsXG4gICAgICB2cGNJZDogdnBjLnJlZixcbiAgICAgIHNlY3VyaXR5R3JvdXBJbmdyZXNzOiBbe1xuICAgICAgICBpcFByb3RvY29sOiAndGNwJyxcbiAgICAgICAgZnJvbVBvcnQ6IDQ0MyxcbiAgICAgICAgdG9Qb3J0OiA0NDMsXG4gICAgICAgIGNpZHJJcDogRm4uZ2V0QXR0KHZwYy5sb2dpY2FsSWQsICdDaWRyQmxvY2snKSBhcyBhbnksXG4gICAgICB9XSxcbiAgICAgIHRhZ3M6IFt7IGtleTogJ05hbWUnLCB2YWx1ZTogYCR7c3RhY2tOYW1lfS1lbmRwb2ludC1zZ2AgfV0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBBZGQgZXhwbGljaXQgcm91dGUgdGFibGUgYXNzb2NpYXRpb25zIGFuZCByb3V0ZXMgZm9yIHBhcml0eSB3aXRoIGNmbi5qc29uXG4gIC8vIFB1YmxpYyBzdWJuZXQgYXNzb2NpYXRpb25zXG4gIGNvbnN0IHN1Ym5ldFB1YmxpY0FBc3NvYyA9IG5ldyBlYzIuQ2ZuU3VibmV0Um91dGVUYWJsZUFzc29jaWF0aW9uKHNjb3BlLCAnU3VibmV0UHVibGljQUFzc29jJywge1xuICAgIHN1Ym5ldElkOiBzdWJuZXRQdWJsaWNBLnJlZixcbiAgICByb3V0ZVRhYmxlSWQ6IHB1YmxpY1JvdXRlVGFibGUucmVmLFxuICB9KTtcblxuICBjb25zdCBzdWJuZXRQdWJsaWNCQXNzb2MgPSBuZXcgZWMyLkNmblN1Ym5ldFJvdXRlVGFibGVBc3NvY2lhdGlvbihzY29wZSwgJ1N1Ym5ldFB1YmxpY0JBc3NvYycsIHtcbiAgICBzdWJuZXRJZDogc3VibmV0UHVibGljQi5yZWYsXG4gICAgcm91dGVUYWJsZUlkOiBwdWJsaWNSb3V0ZVRhYmxlLnJlZixcbiAgfSk7XG5cbiAgLy8gUHJpdmF0ZSBzdWJuZXQgYXNzb2NpYXRpb25zXG4gIGNvbnN0IHN1Ym5ldFByaXZhdGVBQXNzb2MgPSBuZXcgZWMyLkNmblN1Ym5ldFJvdXRlVGFibGVBc3NvY2lhdGlvbihzY29wZSwgJ1N1Ym5ldFByaXZhdGVBQXNzb2MnLCB7XG4gICAgc3VibmV0SWQ6IHN1Ym5ldFByaXZhdGVBLnJlZixcbiAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQS5yZWYsXG4gIH0pO1xuXG4gIGNvbnN0IHN1Ym5ldFByaXZhdGVCQXNzb2MgPSBuZXcgZWMyLkNmblN1Ym5ldFJvdXRlVGFibGVBc3NvY2lhdGlvbihzY29wZSwgJ1N1Ym5ldFByaXZhdGVCQXNzb2MnLCB7XG4gICAgc3VibmV0SWQ6IHN1Ym5ldFByaXZhdGVCLnJlZixcbiAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQi5yZWYsXG4gIH0pO1xuXG4gIC8vIFB1YmxpYyByb3V0ZXMgKElQdjQgYW5kIElQdjYpXG4gIGNvbnN0IHZwY0lnd0F0dGFjaG1lbnQgPSBuZXcgZWMyLkNmblZQQ0dhdGV3YXlBdHRhY2htZW50KHNjb3BlLCAnVlBDSUcnLCB7XG4gICAgdnBjSWQ6IHZwYy5yZWYsXG4gICAgaW50ZXJuZXRHYXRld2F5SWQ6IGlndy5yZWYsXG4gIH0pO1xuXG4gIGNvbnN0IHB1YmxpY1JvdXRlID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1B1YmxpY1JvdXRlJywge1xuICAgIHJvdXRlVGFibGVJZDogcHVibGljUm91dGVUYWJsZS5yZWYsXG4gICAgZGVzdGluYXRpb25DaWRyQmxvY2s6ICcwLjAuMC4wLzAnLFxuICAgIGdhdGV3YXlJZDogaWd3LnJlZixcbiAgfSk7XG4gIHB1YmxpY1JvdXRlLmFkZERlcGVuZGVuY3kodnBjSWd3QXR0YWNobWVudCk7XG5cbiAgY29uc3QgcHVibGljUm91dGVWNiA9IG5ldyBlYzIuQ2ZuUm91dGUoc2NvcGUsICdQdWJsaWNSb3V0ZVY2Jywge1xuICAgIHJvdXRlVGFibGVJZDogcHVibGljUm91dGVUYWJsZS5yZWYsXG4gICAgZGVzdGluYXRpb25JcHY2Q2lkckJsb2NrOiAnOjovMCcsXG4gICAgZ2F0ZXdheUlkOiBpZ3cucmVmLFxuICB9KTtcbiAgcHVibGljUm91dGVWNi5hZGREZXBlbmRlbmN5KHZwY0lnd0F0dGFjaG1lbnQpO1xuXG4gIC8vIFByaXZhdGUgcm91dGVzIChJUHY0IGFuZCBJUHY2KVxuICBjb25zdCBwcml2YXRlUm91dGVBID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1ByaXZhdGVSb3V0ZUEnLCB7XG4gICAgcm91dGVUYWJsZUlkOiBwcml2YXRlUm91dGVUYWJsZUEucmVmLFxuICAgIGRlc3RpbmF0aW9uQ2lkckJsb2NrOiAnMC4wLjAuMC8wJyxcbiAgICBuYXRHYXRld2F5SWQ6IG5hdEdhdGV3YXlBLnJlZixcbiAgfSk7XG5cbiAgbGV0IHByaXZhdGVSb3V0ZUI6IGVjMi5DZm5Sb3V0ZSB8IHVuZGVmaW5lZDtcbiAgaWYgKGlzUHJvZCAmJiBuYXRHYXRld2F5Qikge1xuICAgIHByaXZhdGVSb3V0ZUIgPSBuZXcgZWMyLkNmblJvdXRlKHNjb3BlLCAnUHJpdmF0ZVJvdXRlQicsIHtcbiAgICAgIHJvdXRlVGFibGVJZDogcHJpdmF0ZVJvdXRlVGFibGVCLnJlZixcbiAgICAgIGRlc3RpbmF0aW9uQ2lkckJsb2NrOiAnMC4wLjAuMC8wJyxcbiAgICAgIG5hdEdhdGV3YXlJZDogbmF0R2F0ZXdheUIucmVmLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHByaXZhdGVSb3V0ZUIgPSBuZXcgZWMyLkNmblJvdXRlKHNjb3BlLCAnUHJpdmF0ZVJvdXRlQicsIHtcbiAgICAgIHJvdXRlVGFibGVJZDogcHJpdmF0ZVJvdXRlVGFibGVCLnJlZixcbiAgICAgIGRlc3RpbmF0aW9uQ2lkckJsb2NrOiAnMC4wLjAuMC8wJyxcbiAgICAgIG5hdEdhdGV3YXlJZDogbmF0R2F0ZXdheUEucmVmLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgcHJpdmF0ZVJvdXRlVjZBID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1ByaXZhdGVSb3V0ZVY2QScsIHtcbiAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQS5yZWYsXG4gICAgZGVzdGluYXRpb25JcHY2Q2lkckJsb2NrOiAnOjovMCcsXG4gICAgZ2F0ZXdheUlkOiBlZ3Jlc3NPbmx5SWd3LnJlZixcbiAgfSk7XG5cbiAgY29uc3QgcHJpdmF0ZVJvdXRlVjZCID0gbmV3IGVjMi5DZm5Sb3V0ZShzY29wZSwgJ1ByaXZhdGVSb3V0ZVY2QicsIHtcbiAgICByb3V0ZVRhYmxlSWQ6IHByaXZhdGVSb3V0ZVRhYmxlQi5yZWYsXG4gICAgZGVzdGluYXRpb25JcHY2Q2lkckJsb2NrOiAnOjovMCcsXG4gICAgZ2F0ZXdheUlkOiBlZ3Jlc3NPbmx5SWd3LnJlZixcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICB2cGMsXG4gICAgdnBjQ2lkclY2LFxuICAgIHN1Ym5ldFB1YmxpY0EsXG4gICAgc3VibmV0UHVibGljQixcbiAgICBzdWJuZXRQcml2YXRlQSxcbiAgICBzdWJuZXRQcml2YXRlQixcbiAgICBpZ3csXG4gICAgZWdyZXNzT25seUlndyxcbiAgICBuYXRFaXBBLFxuICAgIG5hdEVpcEIsXG4gICAgbmF0R2F0ZXdheUEsXG4gICAgbmF0R2F0ZXdheUIsXG4gICAgcHVibGljUm91dGVUYWJsZSxcbiAgICBwcml2YXRlUm91dGVUYWJsZUEsXG4gICAgcHJpdmF0ZVJvdXRlVGFibGVCLFxuICAgIGVuZHBvaW50U2csXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWcGNMMlJlc291cmNlcyhzY29wZTogQ29uc3RydWN0LCB2cGNNYWpvcklkOiBudW1iZXIsIHZwY01pbm9ySWQ6IG51bWJlcik6IGVjMi5WcGMge1xuICByZXR1cm4gbmV3IGVjMi5WcGMoc2NvcGUsICdWcGMnLCB7XG4gICAgaXBBZGRyZXNzZXM6IGVjMi5JcEFkZHJlc3Nlcy5jaWRyKGAxMC4ke3ZwY01ham9ySWR9LjAuMC8xNmApLFxuICAgIG1heEF6czogMixcbiAgICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAgICB7XG4gICAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgbmFtZTogJ3B1YmxpYycsXG4gICAgICAgIHN1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBVQkxJQyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNpZHJNYXNrOiAyNCxcbiAgICAgICAgbmFtZTogJ3ByaXZhdGUnLFxuICAgICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QUklWQVRFX1dJVEhfRUdSRVNTLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbn1cbiJdfQ==