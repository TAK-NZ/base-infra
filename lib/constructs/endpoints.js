"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVpcEndpoints = createVpcEndpoints;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
function createVpcEndpoints(scope, params) {
    const endpoints = {};
    // S3 Gateway Endpoint (always created)
    endpoints.s3 = params.vpc.addGatewayEndpoint('S3Endpoint', {
        service: aws_ec2_1.GatewayVpcEndpointAwsService.S3,
        subnets: [{ subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets }],
    });
    // Interface Endpoints (created based on createVpcEndpoints parameter)
    if (params.createVpcEndpoints) {
        const interfaceServices = [
            { id: 'ECRDKREndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR_DOCKER, name: 'ecr-dkr-interface' },
            { id: 'ECRAPIEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR, name: 'ecr-api-interface' },
            { id: 'KMSEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.KMS, name: 'kms-interface' },
            { id: 'SecretsManagerEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.SECRETS_MANAGER, name: 'secretsmanager-interface' },
            { id: 'CloudwatchEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS, name: 'cloudwatch-interface' },
        ];
        for (const ep of interfaceServices) {
            endpoints[ep.id] = params.vpc.addInterfaceEndpoint(ep.id, {
                service: ep.service,
                subnets: { subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets },
                securityGroups: params.endpointSg ? [params.endpointSg] : undefined,
                privateDnsEnabled: true,
            });
        }
    }
    return endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW5kcG9pbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsZ0RBb0NDO0FBdENELGlEQUFtTTtBQUVuTSxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLE1BTXBEO0lBQ0MsTUFBTSxTQUFTLEdBQThELEVBQUUsQ0FBQztJQUVoRix1Q0FBdUM7SUFDdkMsU0FBUyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRTtRQUN6RCxPQUFPLEVBQUUsc0NBQTRCLENBQUMsRUFBRTtRQUN4QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN6RyxDQUFDLENBQUM7SUFFSCxzRUFBc0U7SUFDdEUsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM5QixNQUFNLGlCQUFpQixHQUFHO1lBQ3hCLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ3ZHLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ2hHLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsd0NBQThCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDekYsRUFBRSxFQUFFLEVBQUUsd0JBQXdCLEVBQUUsT0FBTyxFQUFFLHdDQUE4QixDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDM0gsRUFBRSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLHdDQUE4QixDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7U0FDcEgsQ0FBQztRQUVGLEtBQUssTUFBTSxFQUFFLElBQUksaUJBQWlCLEVBQUUsQ0FBQztZQUNuQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEQsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPO2dCQUNuQixPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxVQUFVLEVBQUUsb0JBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUN0RyxjQUFjLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ25FLGlCQUFpQixFQUFFLElBQUk7YUFDeEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBWcGMsIFN1Ym5ldFR5cGUsIFNlY3VyaXR5R3JvdXAsIEdhdGV3YXlWcGNFbmRwb2ludEF3c1NlcnZpY2UsIEludGVyZmFjZVZwY0VuZHBvaW50QXdzU2VydmljZSwgR2F0ZXdheVZwY0VuZHBvaW50LCBJbnRlcmZhY2VWcGNFbmRwb2ludCwgSVZwYywgSVNlY3VyaXR5R3JvdXAgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZwY0VuZHBvaW50cyhzY29wZTogQ29uc3RydWN0LCBwYXJhbXM6IHtcbiAgdnBjOiBJVnBjO1xuICBwcml2YXRlU3VibmV0czogc3RyaW5nW107IC8vIHN1Ym5ldCBJRHMgb3IgU3VibmV0U2VsZWN0aW9uXG4gIGVuZHBvaW50U2c/OiBJU2VjdXJpdHlHcm91cDtcbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIGNyZWF0ZVZwY0VuZHBvaW50czogYm9vbGVhbjtcbn0pIHtcbiAgY29uc3QgZW5kcG9pbnRzOiBSZWNvcmQ8c3RyaW5nLCBHYXRld2F5VnBjRW5kcG9pbnQgfCBJbnRlcmZhY2VWcGNFbmRwb2ludD4gPSB7fTtcbiAgXG4gIC8vIFMzIEdhdGV3YXkgRW5kcG9pbnQgKGFsd2F5cyBjcmVhdGVkKVxuICBlbmRwb2ludHMuczMgPSBwYXJhbXMudnBjLmFkZEdhdGV3YXlFbmRwb2ludCgnUzNFbmRwb2ludCcsIHtcbiAgICBzZXJ2aWNlOiBHYXRld2F5VnBjRW5kcG9pbnRBd3NTZXJ2aWNlLlMzLFxuICAgIHN1Ym5ldHM6IFt7IHN1Ym5ldHM6IHBhcmFtcy52cGMuc2VsZWN0U3VibmV0cyh7IHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX0VHUkVTUyB9KS5zdWJuZXRzIH1dLFxuICB9KTtcbiAgXG4gIC8vIEludGVyZmFjZSBFbmRwb2ludHMgKGNyZWF0ZWQgYmFzZWQgb24gY3JlYXRlVnBjRW5kcG9pbnRzIHBhcmFtZXRlcilcbiAgaWYgKHBhcmFtcy5jcmVhdGVWcGNFbmRwb2ludHMpIHtcbiAgICBjb25zdCBpbnRlcmZhY2VTZXJ2aWNlcyA9IFtcbiAgICAgIHsgaWQ6ICdFQ1JES1JFbmRwb2ludCcsIHNlcnZpY2U6IEludGVyZmFjZVZwY0VuZHBvaW50QXdzU2VydmljZS5FQ1JfRE9DS0VSLCBuYW1lOiAnZWNyLWRrci1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnRUNSQVBJRW5kcG9pbnQnLCBzZXJ2aWNlOiBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UuRUNSLCBuYW1lOiAnZWNyLWFwaS1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnS01TRW5kcG9pbnQnLCBzZXJ2aWNlOiBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UuS01TLCBuYW1lOiAna21zLWludGVyZmFjZScgfSxcbiAgICAgIHsgaWQ6ICdTZWNyZXRzTWFuYWdlckVuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLlNFQ1JFVFNfTUFOQUdFUiwgbmFtZTogJ3NlY3JldHNtYW5hZ2VyLWludGVyZmFjZScgfSxcbiAgICAgIHsgaWQ6ICdDbG91ZHdhdGNoRW5kcG9pbnQnLCBzZXJ2aWNlOiBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UuQ0xPVURXQVRDSF9MT0dTLCBuYW1lOiAnY2xvdWR3YXRjaC1pbnRlcmZhY2UnIH0sXG4gICAgXTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGVwIG9mIGludGVyZmFjZVNlcnZpY2VzKSB7XG4gICAgICBlbmRwb2ludHNbZXAuaWRdID0gcGFyYW1zLnZwYy5hZGRJbnRlcmZhY2VFbmRwb2ludChlcC5pZCwge1xuICAgICAgICBzZXJ2aWNlOiBlcC5zZXJ2aWNlLFxuICAgICAgICBzdWJuZXRzOiB7IHN1Ym5ldHM6IHBhcmFtcy52cGMuc2VsZWN0U3VibmV0cyh7IHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX0VHUkVTUyB9KS5zdWJuZXRzIH0sXG4gICAgICAgIHNlY3VyaXR5R3JvdXBzOiBwYXJhbXMuZW5kcG9pbnRTZyA/IFtwYXJhbXMuZW5kcG9pbnRTZ10gOiB1bmRlZmluZWQsXG4gICAgICAgIHByaXZhdGVEbnNFbmFibGVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gZW5kcG9pbnRzO1xufVxuIl19