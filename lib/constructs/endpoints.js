"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVpcEndpoints = createVpcEndpoints;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
function createVpcEndpoints(scope, params) {
    const endpoints = {};
    // S3 Gateway Endpoint (always created)
    endpoints.s3 = params.vpc.addGatewayEndpoint('S3Endpoint', {
        service: aws_ec2_1.GatewayVpcEndpointAwsService.S3,
        subnets: [{ subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets }],
    });
    // Interface Endpoints (created based on createVpcEndpoints parameter)
    if (params.createVpcEndpoints) {
        const interfaceServices = [
            { id: 'ECRDKREndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR_DOCKER, name: 'ecr-dkr-interface' },
            { id: 'ECRAPIEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR, name: 'ecr-api-interface' },
            { id: 'KMSEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.KMS, name: 'kms-interface' },
            { id: 'SecretsManagerEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.SECRETS_MANAGER, name: 'secretsmanager-interface' },
            { id: 'CloudwatchEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS, name: 'cloudwatch-interface' },
        ];
        for (const ep of interfaceServices) {
            endpoints[ep.id] = params.vpc.addInterfaceEndpoint(ep.id, {
                service: ep.service,
                subnets: { subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets },
                securityGroups: params.endpointSg ? [params.endpointSg] : undefined,
                privateDnsEnabled: true,
            });
        }
    }
    return endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW5kcG9pbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsZ0RBa0NDO0FBcENELGlEQUErSztBQUUvSyxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLE1BSXBEO0lBQ0MsTUFBTSxTQUFTLEdBQThELEVBQUUsQ0FBQztJQUVoRix1Q0FBdUM7SUFDdkMsU0FBUyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRTtRQUN6RCxPQUFPLEVBQUUsc0NBQTRCLENBQUMsRUFBRTtRQUN4QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN6RyxDQUFDLENBQUM7SUFFSCxzRUFBc0U7SUFDdEUsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM5QixNQUFNLGlCQUFpQixHQUFHO1lBQ3hCLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ3ZHLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ2hHLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsd0NBQThCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDekYsRUFBRSxFQUFFLEVBQUUsd0JBQXdCLEVBQUUsT0FBTyxFQUFFLHdDQUE4QixDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUU7WUFDM0gsRUFBRSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLHdDQUE4QixDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7U0FDcEgsQ0FBQztRQUVGLEtBQUssTUFBTSxFQUFFLElBQUksaUJBQWlCLEVBQUUsQ0FBQztZQUNuQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEQsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPO2dCQUNuQixPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxVQUFVLEVBQUUsb0JBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUN0RyxjQUFjLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ25FLGlCQUFpQixFQUFFLElBQUk7YUFDeEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBTdWJuZXRUeXBlLCBHYXRld2F5VnBjRW5kcG9pbnRBd3NTZXJ2aWNlLCBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UsIEdhdGV3YXlWcGNFbmRwb2ludCwgSW50ZXJmYWNlVnBjRW5kcG9pbnQsIElWcGMsIElTZWN1cml0eUdyb3VwIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWcGNFbmRwb2ludHMoc2NvcGU6IENvbnN0cnVjdCwgcGFyYW1zOiB7XG4gIHZwYzogSVZwYztcbiAgZW5kcG9pbnRTZz86IElTZWN1cml0eUdyb3VwO1xuICBjcmVhdGVWcGNFbmRwb2ludHM6IGJvb2xlYW47XG59KSB7XG4gIGNvbnN0IGVuZHBvaW50czogUmVjb3JkPHN0cmluZywgR2F0ZXdheVZwY0VuZHBvaW50IHwgSW50ZXJmYWNlVnBjRW5kcG9pbnQ+ID0ge307XG4gIFxuICAvLyBTMyBHYXRld2F5IEVuZHBvaW50IChhbHdheXMgY3JlYXRlZClcbiAgZW5kcG9pbnRzLnMzID0gcGFyYW1zLnZwYy5hZGRHYXRld2F5RW5kcG9pbnQoJ1MzRW5kcG9pbnQnLCB7XG4gICAgc2VydmljZTogR2F0ZXdheVZwY0VuZHBvaW50QXdzU2VydmljZS5TMyxcbiAgICBzdWJuZXRzOiBbeyBzdWJuZXRzOiBwYXJhbXMudnBjLnNlbGVjdFN1Ym5ldHMoeyBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9FR1JFU1MgfSkuc3VibmV0cyB9XSxcbiAgfSk7XG4gIFxuICAvLyBJbnRlcmZhY2UgRW5kcG9pbnRzIChjcmVhdGVkIGJhc2VkIG9uIGNyZWF0ZVZwY0VuZHBvaW50cyBwYXJhbWV0ZXIpXG4gIGlmIChwYXJhbXMuY3JlYXRlVnBjRW5kcG9pbnRzKSB7XG4gICAgY29uc3QgaW50ZXJmYWNlU2VydmljZXMgPSBbXG4gICAgICB7IGlkOiAnRUNSREtSRW5kcG9pbnQnLCBzZXJ2aWNlOiBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UuRUNSX0RPQ0tFUiwgbmFtZTogJ2Vjci1ka3ItaW50ZXJmYWNlJyB9LFxuICAgICAgeyBpZDogJ0VDUkFQSUVuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLkVDUiwgbmFtZTogJ2Vjci1hcGktaW50ZXJmYWNlJyB9LFxuICAgICAgeyBpZDogJ0tNU0VuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLktNUywgbmFtZTogJ2ttcy1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnU2VjcmV0c01hbmFnZXJFbmRwb2ludCcsIHNlcnZpY2U6IEludGVyZmFjZVZwY0VuZHBvaW50QXdzU2VydmljZS5TRUNSRVRTX01BTkFHRVIsIG5hbWU6ICdzZWNyZXRzbWFuYWdlci1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnQ2xvdWR3YXRjaEVuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLkNMT1VEV0FUQ0hfTE9HUywgbmFtZTogJ2Nsb3Vkd2F0Y2gtaW50ZXJmYWNlJyB9LFxuICAgIF07XG4gICAgXG4gICAgZm9yIChjb25zdCBlcCBvZiBpbnRlcmZhY2VTZXJ2aWNlcykge1xuICAgICAgZW5kcG9pbnRzW2VwLmlkXSA9IHBhcmFtcy52cGMuYWRkSW50ZXJmYWNlRW5kcG9pbnQoZXAuaWQsIHtcbiAgICAgICAgc2VydmljZTogZXAuc2VydmljZSxcbiAgICAgICAgc3VibmV0czogeyBzdWJuZXRzOiBwYXJhbXMudnBjLnNlbGVjdFN1Ym5ldHMoeyBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9FR1JFU1MgfSkuc3VibmV0cyB9LFxuICAgICAgICBzZWN1cml0eUdyb3VwczogcGFyYW1zLmVuZHBvaW50U2cgPyBbcGFyYW1zLmVuZHBvaW50U2ddIDogdW5kZWZpbmVkLFxuICAgICAgICBwcml2YXRlRG5zRW5hYmxlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIGVuZHBvaW50cztcbn1cbiJdfQ==