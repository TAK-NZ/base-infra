"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVpcEndpoints = createVpcEndpoints;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
function createVpcEndpoints(scope, params) {
    const endpoints = {};
    // S3 Gateway Endpoint (always created)
    endpoints.s3 = params.vpc.addGatewayEndpoint('S3Endpoint', {
        service: aws_ec2_1.GatewayVpcEndpointAwsService.S3,
        subnets: [{ subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets }],
    });
    // Interface Endpoints (only created in prod)
    if (params.isProd) {
        const interfaceServices = [
            { id: 'ECRDKREndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR_DOCKER, name: 'ecr-dkr-interface' },
            { id: 'ECRAPIEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR, name: 'ecr-api-interface' },
            { id: 'KMSEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.KMS, name: 'kms-interface' },
            { id: 'SecretsManagerEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.SECRETS_MANAGER, name: 'secretsmanager-interface' },
            { id: 'CloudwatchEndpoint', service: aws_ec2_1.InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS, name: 'cloudwatch-interface' },
        ];
        for (const ep of interfaceServices) {
            endpoints[ep.id] = params.vpc.addInterfaceEndpoint(ep.id, {
                service: ep.service,
                subnets: { subnets: params.vpc.selectSubnets({ subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS }).subnets },
                securityGroups: params.endpointSg ? [params.endpointSg] : undefined,
                privateDnsEnabled: true,
            });
        }
    }
    return endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW5kcG9pbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsZ0RBZ0NDO0FBbENELGlEQUFtTTtBQUVuTSxTQUFnQixrQkFBa0IsQ0FBQyxLQUFnQixFQUFFLE1BTXBEO0lBQ0MsTUFBTSxTQUFTLEdBQThELEVBQUUsQ0FBQztJQUNoRix1Q0FBdUM7SUFDdkMsU0FBUyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRTtRQUN6RCxPQUFPLEVBQUUsc0NBQTRCLENBQUMsRUFBRTtRQUN4QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN6RyxDQUFDLENBQUM7SUFDSCw2Q0FBNkM7SUFDN0MsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsTUFBTSxpQkFBaUIsR0FBRztZQUN4QixFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsd0NBQThCLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUN2RyxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsd0NBQThCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNoRyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLHdDQUE4QixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQ3pGLEVBQUUsRUFBRSxFQUFFLHdCQUF3QixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFO1lBQzNILEVBQUUsRUFBRSxFQUFFLG9CQUFvQixFQUFFLE9BQU8sRUFBRSx3Q0FBOEIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1NBQ3BILENBQUM7UUFDRixLQUFLLE1BQU0sRUFBRSxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDbkMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hELE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTztnQkFDbkIsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsVUFBVSxFQUFFLG9CQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDdEcsY0FBYyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2dCQUNuRSxpQkFBaUIsRUFBRSxJQUFJO2FBQ3hCLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgVnBjLCBTdWJuZXRUeXBlLCBTZWN1cml0eUdyb3VwLCBHYXRld2F5VnBjRW5kcG9pbnRBd3NTZXJ2aWNlLCBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UsIEdhdGV3YXlWcGNFbmRwb2ludCwgSW50ZXJmYWNlVnBjRW5kcG9pbnQsIElWcGMsIElTZWN1cml0eUdyb3VwIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWcGNFbmRwb2ludHMoc2NvcGU6IENvbnN0cnVjdCwgcGFyYW1zOiB7XG4gIHZwYzogSVZwYztcbiAgcHJpdmF0ZVN1Ym5ldHM6IHN0cmluZ1tdOyAvLyBzdWJuZXQgSURzIG9yIFN1Ym5ldFNlbGVjdGlvblxuICBlbmRwb2ludFNnPzogSVNlY3VyaXR5R3JvdXA7XG4gIHN0YWNrTmFtZTogc3RyaW5nO1xuICBpc1Byb2Q6IGJvb2xlYW47XG59KSB7XG4gIGNvbnN0IGVuZHBvaW50czogUmVjb3JkPHN0cmluZywgR2F0ZXdheVZwY0VuZHBvaW50IHwgSW50ZXJmYWNlVnBjRW5kcG9pbnQ+ID0ge307XG4gIC8vIFMzIEdhdGV3YXkgRW5kcG9pbnQgKGFsd2F5cyBjcmVhdGVkKVxuICBlbmRwb2ludHMuczMgPSBwYXJhbXMudnBjLmFkZEdhdGV3YXlFbmRwb2ludCgnUzNFbmRwb2ludCcsIHtcbiAgICBzZXJ2aWNlOiBHYXRld2F5VnBjRW5kcG9pbnRBd3NTZXJ2aWNlLlMzLFxuICAgIHN1Ym5ldHM6IFt7IHN1Ym5ldHM6IHBhcmFtcy52cGMuc2VsZWN0U3VibmV0cyh7IHN1Ym5ldFR5cGU6IFN1Ym5ldFR5cGUuUFJJVkFURV9XSVRIX0VHUkVTUyB9KS5zdWJuZXRzIH1dLFxuICB9KTtcbiAgLy8gSW50ZXJmYWNlIEVuZHBvaW50cyAob25seSBjcmVhdGVkIGluIHByb2QpXG4gIGlmIChwYXJhbXMuaXNQcm9kKSB7XG4gICAgY29uc3QgaW50ZXJmYWNlU2VydmljZXMgPSBbXG4gICAgICB7IGlkOiAnRUNSREtSRW5kcG9pbnQnLCBzZXJ2aWNlOiBJbnRlcmZhY2VWcGNFbmRwb2ludEF3c1NlcnZpY2UuRUNSX0RPQ0tFUiwgbmFtZTogJ2Vjci1ka3ItaW50ZXJmYWNlJyB9LFxuICAgICAgeyBpZDogJ0VDUkFQSUVuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLkVDUiwgbmFtZTogJ2Vjci1hcGktaW50ZXJmYWNlJyB9LFxuICAgICAgeyBpZDogJ0tNU0VuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLktNUywgbmFtZTogJ2ttcy1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnU2VjcmV0c01hbmFnZXJFbmRwb2ludCcsIHNlcnZpY2U6IEludGVyZmFjZVZwY0VuZHBvaW50QXdzU2VydmljZS5TRUNSRVRTX01BTkFHRVIsIG5hbWU6ICdzZWNyZXRzbWFuYWdlci1pbnRlcmZhY2UnIH0sXG4gICAgICB7IGlkOiAnQ2xvdWR3YXRjaEVuZHBvaW50Jywgc2VydmljZTogSW50ZXJmYWNlVnBjRW5kcG9pbnRBd3NTZXJ2aWNlLkNMT1VEV0FUQ0hfTE9HUywgbmFtZTogJ2Nsb3Vkd2F0Y2gtaW50ZXJmYWNlJyB9LFxuICAgIF07XG4gICAgZm9yIChjb25zdCBlcCBvZiBpbnRlcmZhY2VTZXJ2aWNlcykge1xuICAgICAgZW5kcG9pbnRzW2VwLmlkXSA9IHBhcmFtcy52cGMuYWRkSW50ZXJmYWNlRW5kcG9pbnQoZXAuaWQsIHtcbiAgICAgICAgc2VydmljZTogZXAuc2VydmljZSxcbiAgICAgICAgc3VibmV0czogeyBzdWJuZXRzOiBwYXJhbXMudnBjLnNlbGVjdFN1Ym5ldHMoeyBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9FR1JFU1MgfSkuc3VibmV0cyB9LFxuICAgICAgICBzZWN1cml0eUdyb3VwczogcGFyYW1zLmVuZHBvaW50U2cgPyBbcGFyYW1zLmVuZHBvaW50U2ddIDogdW5kZWZpbmVkLFxuICAgICAgICBwcml2YXRlRG5zRW5hYmxlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZW5kcG9pbnRzO1xufVxuIl19